// generated by the protocol buffer streamr pluging. DO NOT EDIT!
// generated from protobuf file "HelloRpc.proto"

#ifndef STREAMR_PROTORPC_HELLORPC_CLIENT_PB_H
#define STREAMR_PROTORPC_HELLORPC_CLIENT_PB_H

#include <folly/coro/Task.h>
#include <chrono>
#include <optional>
#include "HelloRpc.pb.h" // NOLINT
#include "streamr-proto-rpc/RpcCommunicator.hpp"


namespace streamr::protorpc {
using streamr::protorpc::RpcCommunicator;
template <typename CallContextType>
class HelloRpcServiceClient {
private:
RpcCommunicator<CallContextType>& communicator;
public:
    explicit HelloRpcServiceClient(RpcCommunicator<CallContextType>& communicator) : communicator(communicator) {}
    folly::coro::Task<HelloResponse> sayHello(HelloRequest&& request, CallContextType&& callContext, std::optional<std::chrono::milliseconds> timeout = std::nullopt) {
        return communicator.template request<HelloResponse, HelloRequest>("sayHello", std::move(request), std::move(callContext), timeout);
    }
}; // class HelloRpcServiceClient
}; // namespace streamr::protorpc

#endif // STREAMR_PROTORPC_HELLORPC_CLIENT_PB_H

