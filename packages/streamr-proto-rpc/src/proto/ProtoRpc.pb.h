// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoRpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtoRpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtoRpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtoRpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtoRpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtoRpc_2eproto;
namespace protorpc {
class Mnfo2uhnf92hvqi2nviouq2hv9puhq;
struct Mnfo2uhnf92hvqi2nviouq2hv9puhqDefaultTypeInternal;
extern Mnfo2uhnf92hvqi2nviouq2hv9puhqDefaultTypeInternal _Mnfo2uhnf92hvqi2nviouq2hv9puhq_default_instance_;
class RpcMessage;
struct RpcMessageDefaultTypeInternal;
extern RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
class RpcMessage_HeaderEntry_DoNotUse;
struct RpcMessage_HeaderEntry_DoNotUseDefaultTypeInternal;
extern RpcMessage_HeaderEntry_DoNotUseDefaultTypeInternal _RpcMessage_HeaderEntry_DoNotUse_default_instance_;
}  // namespace protorpc
PROTOBUF_NAMESPACE_OPEN
template<> ::protorpc::Mnfo2uhnf92hvqi2nviouq2hv9puhq* Arena::CreateMaybeMessage<::protorpc::Mnfo2uhnf92hvqi2nviouq2hv9puhq>(Arena*);
template<> ::protorpc::RpcMessage* Arena::CreateMaybeMessage<::protorpc::RpcMessage>(Arena*);
template<> ::protorpc::RpcMessage_HeaderEntry_DoNotUse* Arena::CreateMaybeMessage<::protorpc::RpcMessage_HeaderEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protorpc {

enum RpcErrorType : int {
  SERVER_TIMEOUT = 0,
  CLIENT_TIMEOUT = 1,
  UNKNOWN_RPC_METHOD = 2,
  CLIENT_ERROR = 3,
  SERVER_ERROR = 4,
  RpcErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RpcErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RpcErrorType_IsValid(int value);
constexpr RpcErrorType RpcErrorType_MIN = SERVER_TIMEOUT;
constexpr RpcErrorType RpcErrorType_MAX = SERVER_ERROR;
constexpr int RpcErrorType_ARRAYSIZE = RpcErrorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RpcErrorType_descriptor();
template<typename T>
inline const std::string& RpcErrorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RpcErrorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RpcErrorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RpcErrorType_descriptor(), enum_t_value);
}
inline bool RpcErrorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RpcErrorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RpcErrorType>(
    RpcErrorType_descriptor(), name, value);
}
// ===================================================================

class RpcMessage_HeaderEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcMessage_HeaderEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<RpcMessage_HeaderEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  RpcMessage_HeaderEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RpcMessage_HeaderEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RpcMessage_HeaderEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RpcMessage_HeaderEntry_DoNotUse& other);
  static const RpcMessage_HeaderEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RpcMessage_HeaderEntry_DoNotUse*>(&_RpcMessage_HeaderEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protorpc.RpcMessage.HeaderEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protorpc.RpcMessage.HeaderEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ProtoRpc_2eproto;
};

// -------------------------------------------------------------------

class RpcMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protorpc.RpcMessage) */ {
 public:
  inline RpcMessage() : RpcMessage(nullptr) {}
  ~RpcMessage() override;
  explicit PROTOBUF_CONSTEXPR RpcMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcMessage(const RpcMessage& from);
  RpcMessage(RpcMessage&& from) noexcept
    : RpcMessage() {
    *this = ::std::move(from);
  }

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMessage& operator=(RpcMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMessage* internal_default_instance() {
    return reinterpret_cast<const RpcMessage*>(
               &_RpcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcMessage& a, RpcMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMessage>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protorpc.RpcMessage";
  }
  protected:
  explicit RpcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRequestIdFieldNumber = 3,
    kErrorClassNameFieldNumber = 5,
    kErrorCodeFieldNumber = 6,
    kErrorMessageFieldNumber = 7,
    kBodyFieldNumber = 2,
    kErrorTypeFieldNumber = 4,
  };
  // map<string, string> header = 1;
  int header_size() const;
  private:
  int _internal_header_size() const;
  public:
  void clear_header();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_header() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_header();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      header() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_header();

  // string requestId = 3;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // optional string errorClassName = 5;
  bool has_errorclassname() const;
  private:
  bool _internal_has_errorclassname() const;
  public:
  void clear_errorclassname();
  const std::string& errorclassname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errorclassname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errorclassname();
  PROTOBUF_NODISCARD std::string* release_errorclassname();
  void set_allocated_errorclassname(std::string* errorclassname);
  private:
  const std::string& _internal_errorclassname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errorclassname(const std::string& value);
  std::string* _internal_mutable_errorclassname();
  public:

  // optional string errorCode = 6;
  bool has_errorcode() const;
  private:
  bool _internal_has_errorcode() const;
  public:
  void clear_errorcode();
  const std::string& errorcode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errorcode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errorcode();
  PROTOBUF_NODISCARD std::string* release_errorcode();
  void set_allocated_errorcode(std::string* errorcode);
  private:
  const std::string& _internal_errorcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errorcode(const std::string& value);
  std::string* _internal_mutable_errorcode();
  public:

  // optional string errorMessage = 7;
  bool has_errormessage() const;
  private:
  bool _internal_has_errormessage() const;
  public:
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // .google.protobuf.Any body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::PROTOBUF_NAMESPACE_ID::Any& body() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_body();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_body();
  void set_allocated_body(::PROTOBUF_NAMESPACE_ID::Any* body);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_body() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::PROTOBUF_NAMESPACE_ID::Any* body);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_body();

  // optional .protorpc.RpcErrorType errorType = 4;
  bool has_errortype() const;
  private:
  bool _internal_has_errortype() const;
  public:
  void clear_errortype();
  ::protorpc::RpcErrorType errortype() const;
  void set_errortype(::protorpc::RpcErrorType value);
  private:
  ::protorpc::RpcErrorType _internal_errortype() const;
  void _internal_set_errortype(::protorpc::RpcErrorType value);
  public:

  // @@protoc_insertion_point(class_scope:protorpc.RpcMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        RpcMessage_HeaderEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> header_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errorclassname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errorcode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    ::PROTOBUF_NAMESPACE_ID::Any* body_;
    int errortype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoRpc_2eproto;
};
// -------------------------------------------------------------------

class Mnfo2uhnf92hvqi2nviouq2hv9puhq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq) */ {
 public:
  inline Mnfo2uhnf92hvqi2nviouq2hv9puhq() : Mnfo2uhnf92hvqi2nviouq2hv9puhq(nullptr) {}
  ~Mnfo2uhnf92hvqi2nviouq2hv9puhq() override;
  explicit PROTOBUF_CONSTEXPR Mnfo2uhnf92hvqi2nviouq2hv9puhq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mnfo2uhnf92hvqi2nviouq2hv9puhq(const Mnfo2uhnf92hvqi2nviouq2hv9puhq& from);
  Mnfo2uhnf92hvqi2nviouq2hv9puhq(Mnfo2uhnf92hvqi2nviouq2hv9puhq&& from) noexcept
    : Mnfo2uhnf92hvqi2nviouq2hv9puhq() {
    *this = ::std::move(from);
  }

  inline Mnfo2uhnf92hvqi2nviouq2hv9puhq& operator=(const Mnfo2uhnf92hvqi2nviouq2hv9puhq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mnfo2uhnf92hvqi2nviouq2hv9puhq& operator=(Mnfo2uhnf92hvqi2nviouq2hv9puhq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mnfo2uhnf92hvqi2nviouq2hv9puhq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mnfo2uhnf92hvqi2nviouq2hv9puhq* internal_default_instance() {
    return reinterpret_cast<const Mnfo2uhnf92hvqi2nviouq2hv9puhq*>(
               &_Mnfo2uhnf92hvqi2nviouq2hv9puhq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Mnfo2uhnf92hvqi2nviouq2hv9puhq& a, Mnfo2uhnf92hvqi2nviouq2hv9puhq& b) {
    a.Swap(&b);
  }
  inline void Swap(Mnfo2uhnf92hvqi2nviouq2hv9puhq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mnfo2uhnf92hvqi2nviouq2hv9puhq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mnfo2uhnf92hvqi2nviouq2hv9puhq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mnfo2uhnf92hvqi2nviouq2hv9puhq>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mnfo2uhnf92hvqi2nviouq2hv9puhq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq";
  }
  protected:
  explicit Mnfo2uhnf92hvqi2nviouq2hv9puhq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyFieldNumber = 1,
  };
  // .google.protobuf.Empty empty = 1;
  bool has_empty() const;
  private:
  bool _internal_has_empty() const;
  public:
  void clear_empty();
  const ::PROTOBUF_NAMESPACE_ID::Empty& empty() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Empty* release_empty();
  ::PROTOBUF_NAMESPACE_ID::Empty* mutable_empty();
  void set_allocated_empty(::PROTOBUF_NAMESPACE_ID::Empty* empty);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Empty& _internal_empty() const;
  ::PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_empty();
  public:
  void unsafe_arena_set_allocated_empty(
      ::PROTOBUF_NAMESPACE_ID::Empty* empty);
  ::PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_empty();

  // @@protoc_insertion_point(class_scope:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Empty* empty_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoRpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RpcMessage

// map<string, string> header = 1;
inline int RpcMessage::_internal_header_size() const {
  return _impl_.header_.size();
}
inline int RpcMessage::header_size() const {
  return _internal_header_size();
}
inline void RpcMessage::clear_header() {
  _impl_.header_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RpcMessage::_internal_header() const {
  return _impl_.header_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
RpcMessage::header() const {
  // @@protoc_insertion_point(field_map:protorpc.RpcMessage.header)
  return _internal_header();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RpcMessage::_internal_mutable_header() {
  return _impl_.header_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
RpcMessage::mutable_header() {
  // @@protoc_insertion_point(field_mutable_map:protorpc.RpcMessage.header)
  return _internal_mutable_header();
}

// .google.protobuf.Any body = 2;
inline bool RpcMessage::_internal_has_body() const {
  return this != internal_default_instance() && _impl_.body_ != nullptr;
}
inline bool RpcMessage::has_body() const {
  return _internal_has_body();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& RpcMessage::_internal_body() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& RpcMessage::body() const {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.body)
  return _internal_body();
}
inline void RpcMessage::unsafe_arena_set_allocated_body(
    ::PROTOBUF_NAMESPACE_ID::Any* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protorpc.RpcMessage.body)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RpcMessage::release_body() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RpcMessage::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:protorpc.RpcMessage.body)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RpcMessage::_internal_mutable_body() {
  
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RpcMessage::mutable_body() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:protorpc.RpcMessage.body)
  return _msg;
}
inline void RpcMessage::set_allocated_body(::PROTOBUF_NAMESPACE_ID::Any* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body));
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:protorpc.RpcMessage.body)
}

// string requestId = 3;
inline void RpcMessage::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& RpcMessage::requestid() const {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protorpc.RpcMessage.requestId)
}
inline std::string* RpcMessage::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:protorpc.RpcMessage.requestId)
  return _s;
}
inline const std::string& RpcMessage::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void RpcMessage::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMessage::release_requestid() {
  // @@protoc_insertion_point(field_release:protorpc.RpcMessage.requestId)
  return _impl_.requestid_.Release();
}
inline void RpcMessage::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protorpc.RpcMessage.requestId)
}

// optional .protorpc.RpcErrorType errorType = 4;
inline bool RpcMessage::_internal_has_errortype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RpcMessage::has_errortype() const {
  return _internal_has_errortype();
}
inline void RpcMessage::clear_errortype() {
  _impl_.errortype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::protorpc::RpcErrorType RpcMessage::_internal_errortype() const {
  return static_cast< ::protorpc::RpcErrorType >(_impl_.errortype_);
}
inline ::protorpc::RpcErrorType RpcMessage::errortype() const {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.errorType)
  return _internal_errortype();
}
inline void RpcMessage::_internal_set_errortype(::protorpc::RpcErrorType value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.errortype_ = value;
}
inline void RpcMessage::set_errortype(::protorpc::RpcErrorType value) {
  _internal_set_errortype(value);
  // @@protoc_insertion_point(field_set:protorpc.RpcMessage.errorType)
}

// optional string errorClassName = 5;
inline bool RpcMessage::_internal_has_errorclassname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RpcMessage::has_errorclassname() const {
  return _internal_has_errorclassname();
}
inline void RpcMessage::clear_errorclassname() {
  _impl_.errorclassname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcMessage::errorclassname() const {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.errorClassName)
  return _internal_errorclassname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_errorclassname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.errorclassname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protorpc.RpcMessage.errorClassName)
}
inline std::string* RpcMessage::mutable_errorclassname() {
  std::string* _s = _internal_mutable_errorclassname();
  // @@protoc_insertion_point(field_mutable:protorpc.RpcMessage.errorClassName)
  return _s;
}
inline const std::string& RpcMessage::_internal_errorclassname() const {
  return _impl_.errorclassname_.Get();
}
inline void RpcMessage::_internal_set_errorclassname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errorclassname_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_errorclassname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errorclassname_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMessage::release_errorclassname() {
  // @@protoc_insertion_point(field_release:protorpc.RpcMessage.errorClassName)
  if (!_internal_has_errorclassname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.errorclassname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errorclassname_.IsDefault()) {
    _impl_.errorclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcMessage::set_allocated_errorclassname(std::string* errorclassname) {
  if (errorclassname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errorclassname_.SetAllocated(errorclassname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errorclassname_.IsDefault()) {
    _impl_.errorclassname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protorpc.RpcMessage.errorClassName)
}

// optional string errorCode = 6;
inline bool RpcMessage::_internal_has_errorcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RpcMessage::has_errorcode() const {
  return _internal_has_errorcode();
}
inline void RpcMessage::clear_errorcode() {
  _impl_.errorcode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcMessage::errorcode() const {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.errorCode)
  return _internal_errorcode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_errorcode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.errorcode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protorpc.RpcMessage.errorCode)
}
inline std::string* RpcMessage::mutable_errorcode() {
  std::string* _s = _internal_mutable_errorcode();
  // @@protoc_insertion_point(field_mutable:protorpc.RpcMessage.errorCode)
  return _s;
}
inline const std::string& RpcMessage::_internal_errorcode() const {
  return _impl_.errorcode_.Get();
}
inline void RpcMessage::_internal_set_errorcode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.errorcode_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_errorcode() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.errorcode_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMessage::release_errorcode() {
  // @@protoc_insertion_point(field_release:protorpc.RpcMessage.errorCode)
  if (!_internal_has_errorcode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.errorcode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errorcode_.IsDefault()) {
    _impl_.errorcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcMessage::set_allocated_errorcode(std::string* errorcode) {
  if (errorcode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.errorcode_.SetAllocated(errorcode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errorcode_.IsDefault()) {
    _impl_.errorcode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protorpc.RpcMessage.errorCode)
}

// optional string errorMessage = 7;
inline bool RpcMessage::_internal_has_errormessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RpcMessage::has_errormessage() const {
  return _internal_has_errormessage();
}
inline void RpcMessage::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RpcMessage::errormessage() const {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_errormessage(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.errormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protorpc.RpcMessage.errorMessage)
}
inline std::string* RpcMessage::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:protorpc.RpcMessage.errorMessage)
  return _s;
}
inline const std::string& RpcMessage::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void RpcMessage::_internal_set_errormessage(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_errormessage() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMessage::release_errormessage() {
  // @@protoc_insertion_point(field_release:protorpc.RpcMessage.errorMessage)
  if (!_internal_has_errormessage()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.errormessage_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RpcMessage::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protorpc.RpcMessage.errorMessage)
}

// -------------------------------------------------------------------

// Mnfo2uhnf92hvqi2nviouq2hv9puhq

// .google.protobuf.Empty empty = 1;
inline bool Mnfo2uhnf92hvqi2nviouq2hv9puhq::_internal_has_empty() const {
  return this != internal_default_instance() && _impl_.empty_ != nullptr;
}
inline bool Mnfo2uhnf92hvqi2nviouq2hv9puhq::has_empty() const {
  return _internal_has_empty();
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& Mnfo2uhnf92hvqi2nviouq2hv9puhq::_internal_empty() const {
  const ::PROTOBUF_NAMESPACE_ID::Empty* p = _impl_.empty_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Empty&>(
      ::PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& Mnfo2uhnf92hvqi2nviouq2hv9puhq::empty() const {
  // @@protoc_insertion_point(field_get:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq.empty)
  return _internal_empty();
}
inline void Mnfo2uhnf92hvqi2nviouq2hv9puhq::unsafe_arena_set_allocated_empty(
    ::PROTOBUF_NAMESPACE_ID::Empty* empty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.empty_);
  }
  _impl_.empty_ = empty;
  if (empty) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq.empty)
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Mnfo2uhnf92hvqi2nviouq2hv9puhq::release_empty() {
  
  ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.empty_;
  _impl_.empty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Mnfo2uhnf92hvqi2nviouq2hv9puhq::unsafe_arena_release_empty() {
  // @@protoc_insertion_point(field_release:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq.empty)
  
  ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.empty_;
  _impl_.empty_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Mnfo2uhnf92hvqi2nviouq2hv9puhq::_internal_mutable_empty() {
  
  if (_impl_.empty_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Empty>(GetArenaForAllocation());
    _impl_.empty_ = p;
  }
  return _impl_.empty_;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Mnfo2uhnf92hvqi2nviouq2hv9puhq::mutable_empty() {
  ::PROTOBUF_NAMESPACE_ID::Empty* _msg = _internal_mutable_empty();
  // @@protoc_insertion_point(field_mutable:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq.empty)
  return _msg;
}
inline void Mnfo2uhnf92hvqi2nviouq2hv9puhq::set_allocated_empty(::PROTOBUF_NAMESPACE_ID::Empty* empty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.empty_);
  }
  if (empty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(empty));
    if (message_arena != submessage_arena) {
      empty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, empty, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.empty_ = empty;
  // @@protoc_insertion_point(field_set_allocated:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq.empty)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protorpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protorpc::RpcErrorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protorpc::RpcErrorType>() {
  return ::protorpc::RpcErrorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtoRpc_2eproto
