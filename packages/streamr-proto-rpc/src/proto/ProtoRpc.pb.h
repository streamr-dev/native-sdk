// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoRpc.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtoRpc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ProtoRpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ProtoRpc_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtoRpc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ProtoRpc_2eproto;
namespace protorpc {
class Mnfo2uhnf92hvqi2nviouq2hv9puhq;
struct Mnfo2uhnf92hvqi2nviouq2hv9puhqDefaultTypeInternal;
extern Mnfo2uhnf92hvqi2nviouq2hv9puhqDefaultTypeInternal _Mnfo2uhnf92hvqi2nviouq2hv9puhq_default_instance_;
class RpcMessage;
struct RpcMessageDefaultTypeInternal;
extern RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
class RpcMessage_HeaderEntry_DoNotUse;
struct RpcMessage_HeaderEntry_DoNotUseDefaultTypeInternal;
extern RpcMessage_HeaderEntry_DoNotUseDefaultTypeInternal _RpcMessage_HeaderEntry_DoNotUse_default_instance_;
}  // namespace protorpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protorpc {
enum RpcErrorType : int {
  SERVER_TIMEOUT = 0,
  CLIENT_TIMEOUT = 1,
  UNKNOWN_RPC_METHOD = 2,
  CLIENT_ERROR = 3,
  SERVER_ERROR = 4,
  RpcErrorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RpcErrorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RpcErrorType_IsValid(int value);
extern const uint32_t RpcErrorType_internal_data_[];
constexpr RpcErrorType RpcErrorType_MIN = static_cast<RpcErrorType>(0);
constexpr RpcErrorType RpcErrorType_MAX = static_cast<RpcErrorType>(4);
constexpr int RpcErrorType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
RpcErrorType_descriptor();
template <typename T>
const std::string& RpcErrorType_Name(T value) {
  static_assert(std::is_same<T, RpcErrorType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RpcErrorType_Name().");
  return RpcErrorType_Name(static_cast<RpcErrorType>(value));
}
template <>
inline const std::string& RpcErrorType_Name(RpcErrorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RpcErrorType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool RpcErrorType_Parse(absl::string_view name, RpcErrorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcErrorType>(
      RpcErrorType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RpcMessage_HeaderEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          RpcMessage_HeaderEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      RpcMessage_HeaderEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  RpcMessage_HeaderEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RpcMessage_HeaderEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit RpcMessage_HeaderEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const RpcMessage_HeaderEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const RpcMessage_HeaderEntry_DoNotUse*>(
        &_RpcMessage_HeaderEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "protorpc.RpcMessage.HeaderEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "protorpc.RpcMessage.HeaderEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ProtoRpc_2eproto;
};
// -------------------------------------------------------------------

class RpcMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protorpc.RpcMessage) */ {
 public:
  inline RpcMessage() : RpcMessage(nullptr) {}
  ~RpcMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RpcMessage(::google::protobuf::internal::ConstantInitialized);

  inline RpcMessage(const RpcMessage& from)
      : RpcMessage(nullptr, from) {}
  RpcMessage(RpcMessage&& from) noexcept
    : RpcMessage() {
    *this = ::std::move(from);
  }

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMessage& operator=(RpcMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMessage* internal_default_instance() {
    return reinterpret_cast<const RpcMessage*>(
               &_RpcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RpcMessage& a, RpcMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMessage>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RpcMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protorpc.RpcMessage";
  }
  protected:
  explicit RpcMessage(::google::protobuf::Arena* arena);
  RpcMessage(::google::protobuf::Arena* arena, const RpcMessage& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRequestIdFieldNumber = 3,
    kErrorClassNameFieldNumber = 5,
    kErrorCodeFieldNumber = 6,
    kErrorMessageFieldNumber = 7,
    kBodyFieldNumber = 2,
    kErrorTypeFieldNumber = 4,
  };
  // map<string, string> header = 1;
  int header_size() const;
  private:
  int _internal_header_size() const;

  public:
  void clear_header() ;
  const ::google::protobuf::Map<std::string, std::string>& header() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_header();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_header() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_header();

  public:
  // string requestId = 3;
  void clear_requestid() ;
  const std::string& requestid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requestid(Arg_&& arg, Args_... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* value);

  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(
      const std::string& value);
  std::string* _internal_mutable_requestid();

  public:
  // optional string errorClassName = 5;
  bool has_errorclassname() const;
  void clear_errorclassname() ;
  const std::string& errorclassname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errorclassname(Arg_&& arg, Args_... args);
  std::string* mutable_errorclassname();
  PROTOBUF_NODISCARD std::string* release_errorclassname();
  void set_allocated_errorclassname(std::string* value);

  private:
  const std::string& _internal_errorclassname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errorclassname(
      const std::string& value);
  std::string* _internal_mutable_errorclassname();

  public:
  // optional string errorCode = 6;
  bool has_errorcode() const;
  void clear_errorcode() ;
  const std::string& errorcode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errorcode(Arg_&& arg, Args_... args);
  std::string* mutable_errorcode();
  PROTOBUF_NODISCARD std::string* release_errorcode();
  void set_allocated_errorcode(std::string* value);

  private:
  const std::string& _internal_errorcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errorcode(
      const std::string& value);
  std::string* _internal_mutable_errorcode();

  public:
  // optional string errorMessage = 7;
  bool has_errormessage() const;
  void clear_errormessage() ;
  const std::string& errormessage() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errormessage(Arg_&& arg, Args_... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* value);

  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(
      const std::string& value);
  std::string* _internal_mutable_errormessage();

  public:
  // .google.protobuf.Any body = 2;
  bool has_body() const;
  void clear_body() ;
  const ::google::protobuf::Any& body() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_body();
  ::google::protobuf::Any* mutable_body();
  void set_allocated_body(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_body(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_body();

  private:
  const ::google::protobuf::Any& _internal_body() const;
  ::google::protobuf::Any* _internal_mutable_body();

  public:
  // optional .protorpc.RpcErrorType errorType = 4;
  bool has_errortype() const;
  void clear_errortype() ;
  ::protorpc::RpcErrorType errortype() const;
  void set_errortype(::protorpc::RpcErrorType value);

  private:
  ::protorpc::RpcErrorType _internal_errortype() const;
  void _internal_set_errortype(::protorpc::RpcErrorType value);

  public:
  // @@protoc_insertion_point(class_scope:protorpc.RpcMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<RpcMessage_HeaderEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        header_;
    ::google::protobuf::internal::ArenaStringPtr requestid_;
    ::google::protobuf::internal::ArenaStringPtr errorclassname_;
    ::google::protobuf::internal::ArenaStringPtr errorcode_;
    ::google::protobuf::internal::ArenaStringPtr errormessage_;
    ::google::protobuf::Any* body_;
    int errortype_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoRpc_2eproto;
};// -------------------------------------------------------------------

class Mnfo2uhnf92hvqi2nviouq2hv9puhq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq) */ {
 public:
  inline Mnfo2uhnf92hvqi2nviouq2hv9puhq() : Mnfo2uhnf92hvqi2nviouq2hv9puhq(nullptr) {}
  ~Mnfo2uhnf92hvqi2nviouq2hv9puhq() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Mnfo2uhnf92hvqi2nviouq2hv9puhq(::google::protobuf::internal::ConstantInitialized);

  inline Mnfo2uhnf92hvqi2nviouq2hv9puhq(const Mnfo2uhnf92hvqi2nviouq2hv9puhq& from)
      : Mnfo2uhnf92hvqi2nviouq2hv9puhq(nullptr, from) {}
  Mnfo2uhnf92hvqi2nviouq2hv9puhq(Mnfo2uhnf92hvqi2nviouq2hv9puhq&& from) noexcept
    : Mnfo2uhnf92hvqi2nviouq2hv9puhq() {
    *this = ::std::move(from);
  }

  inline Mnfo2uhnf92hvqi2nviouq2hv9puhq& operator=(const Mnfo2uhnf92hvqi2nviouq2hv9puhq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mnfo2uhnf92hvqi2nviouq2hv9puhq& operator=(Mnfo2uhnf92hvqi2nviouq2hv9puhq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mnfo2uhnf92hvqi2nviouq2hv9puhq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mnfo2uhnf92hvqi2nviouq2hv9puhq* internal_default_instance() {
    return reinterpret_cast<const Mnfo2uhnf92hvqi2nviouq2hv9puhq*>(
               &_Mnfo2uhnf92hvqi2nviouq2hv9puhq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Mnfo2uhnf92hvqi2nviouq2hv9puhq& a, Mnfo2uhnf92hvqi2nviouq2hv9puhq& b) {
    a.Swap(&b);
  }
  inline void Swap(Mnfo2uhnf92hvqi2nviouq2hv9puhq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mnfo2uhnf92hvqi2nviouq2hv9puhq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mnfo2uhnf92hvqi2nviouq2hv9puhq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mnfo2uhnf92hvqi2nviouq2hv9puhq>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Mnfo2uhnf92hvqi2nviouq2hv9puhq* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq";
  }
  protected:
  explicit Mnfo2uhnf92hvqi2nviouq2hv9puhq(::google::protobuf::Arena* arena);
  Mnfo2uhnf92hvqi2nviouq2hv9puhq(::google::protobuf::Arena* arena, const Mnfo2uhnf92hvqi2nviouq2hv9puhq& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmptyFieldNumber = 1,
  };
  // .google.protobuf.Empty empty = 1;
  bool has_empty() const;
  void clear_empty() ;
  const ::google::protobuf::Empty& empty() const;
  PROTOBUF_NODISCARD ::google::protobuf::Empty* release_empty();
  ::google::protobuf::Empty* mutable_empty();
  void set_allocated_empty(::google::protobuf::Empty* value);
  void unsafe_arena_set_allocated_empty(::google::protobuf::Empty* value);
  ::google::protobuf::Empty* unsafe_arena_release_empty();

  private:
  const ::google::protobuf::Empty& _internal_empty() const;
  ::google::protobuf::Empty* _internal_mutable_empty();

  public:
  // @@protoc_insertion_point(class_scope:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Empty* empty_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ProtoRpc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RpcMessage

// map<string, string> header = 1;
inline int RpcMessage::_internal_header_size() const {
  return _internal_header().size();
}
inline int RpcMessage::header_size() const {
  return _internal_header_size();
}
inline void RpcMessage::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.header_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& RpcMessage::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.header_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& RpcMessage::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:protorpc.RpcMessage.header)
  return _internal_header();
}
inline ::google::protobuf::Map<std::string, std::string>* RpcMessage::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.header_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* RpcMessage::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:protorpc.RpcMessage.header)
  return _internal_mutable_header();
}

// .google.protobuf.Any body = 2;
inline bool RpcMessage::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& RpcMessage::_internal_body() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Any* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& RpcMessage::body() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.body)
  return _internal_body();
}
inline void RpcMessage::unsafe_arena_set_allocated_body(::google::protobuf::Any* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protorpc.RpcMessage.body)
}
inline ::google::protobuf::Any* RpcMessage::release_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Any* released = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Any* RpcMessage::unsafe_arena_release_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protorpc.RpcMessage.body)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Any* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* RpcMessage::_internal_mutable_body() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Any>(GetArena());
    _impl_.body_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.body_;
}
inline ::google::protobuf::Any* RpcMessage::mutable_body() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Any* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:protorpc.RpcMessage.body)
  return _msg;
}
inline void RpcMessage::set_allocated_body(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.body_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.body_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:protorpc.RpcMessage.body)
}

// string requestId = 3;
inline void RpcMessage::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& RpcMessage::requestid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.requestId)
  return _internal_requestid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcMessage::set_requestid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protorpc.RpcMessage.requestId)
}
inline std::string* RpcMessage::mutable_requestid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:protorpc.RpcMessage.requestId)
  return _s;
}
inline const std::string& RpcMessage::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_.Get();
}
inline void RpcMessage::_internal_set_requestid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(value, GetArena());
}
inline std::string* RpcMessage::_internal_mutable_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.requestid_.Mutable( GetArena());
}
inline std::string* RpcMessage::release_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protorpc.RpcMessage.requestId)
  return _impl_.requestid_.Release();
}
inline void RpcMessage::set_allocated_requestid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.requestid_.IsDefault()) {
          _impl_.requestid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protorpc.RpcMessage.requestId)
}

// optional .protorpc.RpcErrorType errorType = 4;
inline bool RpcMessage::has_errortype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void RpcMessage::clear_errortype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errortype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::protorpc::RpcErrorType RpcMessage::errortype() const {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.errorType)
  return _internal_errortype();
}
inline void RpcMessage::set_errortype(::protorpc::RpcErrorType value) {
  _internal_set_errortype(value);
  // @@protoc_insertion_point(field_set:protorpc.RpcMessage.errorType)
}
inline ::protorpc::RpcErrorType RpcMessage::_internal_errortype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::protorpc::RpcErrorType>(_impl_.errortype_);
}
inline void RpcMessage::_internal_set_errortype(::protorpc::RpcErrorType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.errortype_ = value;
}

// optional string errorClassName = 5;
inline bool RpcMessage::has_errorclassname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RpcMessage::clear_errorclassname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errorclassname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RpcMessage::errorclassname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.errorClassName)
  return _internal_errorclassname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcMessage::set_errorclassname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errorclassname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protorpc.RpcMessage.errorClassName)
}
inline std::string* RpcMessage::mutable_errorclassname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errorclassname();
  // @@protoc_insertion_point(field_mutable:protorpc.RpcMessage.errorClassName)
  return _s;
}
inline const std::string& RpcMessage::_internal_errorclassname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.errorclassname_.Get();
}
inline void RpcMessage::_internal_set_errorclassname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errorclassname_.Set(value, GetArena());
}
inline std::string* RpcMessage::_internal_mutable_errorclassname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.errorclassname_.Mutable( GetArena());
}
inline std::string* RpcMessage::release_errorclassname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protorpc.RpcMessage.errorClassName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.errorclassname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errorclassname_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcMessage::set_allocated_errorclassname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.errorclassname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errorclassname_.IsDefault()) {
          _impl_.errorclassname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protorpc.RpcMessage.errorClassName)
}

// optional string errorCode = 6;
inline bool RpcMessage::has_errorcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RpcMessage::clear_errorcode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errorcode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RpcMessage::errorcode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.errorCode)
  return _internal_errorcode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcMessage::set_errorcode(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.errorcode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protorpc.RpcMessage.errorCode)
}
inline std::string* RpcMessage::mutable_errorcode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errorcode();
  // @@protoc_insertion_point(field_mutable:protorpc.RpcMessage.errorCode)
  return _s;
}
inline const std::string& RpcMessage::_internal_errorcode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.errorcode_.Get();
}
inline void RpcMessage::_internal_set_errorcode(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.errorcode_.Set(value, GetArena());
}
inline std::string* RpcMessage::_internal_mutable_errorcode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.errorcode_.Mutable( GetArena());
}
inline std::string* RpcMessage::release_errorcode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protorpc.RpcMessage.errorCode)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.errorcode_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errorcode_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcMessage::set_allocated_errorcode(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.errorcode_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errorcode_.IsDefault()) {
          _impl_.errorcode_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protorpc.RpcMessage.errorCode)
}

// optional string errorMessage = 7;
inline bool RpcMessage::has_errormessage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void RpcMessage::clear_errormessage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.errormessage_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RpcMessage::errormessage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protorpc.RpcMessage.errorMessage)
  return _internal_errormessage();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RpcMessage::set_errormessage(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.errormessage_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protorpc.RpcMessage.errorMessage)
}
inline std::string* RpcMessage::mutable_errormessage() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:protorpc.RpcMessage.errorMessage)
  return _s;
}
inline const std::string& RpcMessage::_internal_errormessage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.errormessage_.Get();
}
inline void RpcMessage::_internal_set_errormessage(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.errormessage_.Set(value, GetArena());
}
inline std::string* RpcMessage::_internal_mutable_errormessage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.errormessage_.Mutable( GetArena());
}
inline std::string* RpcMessage::release_errormessage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protorpc.RpcMessage.errorMessage)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.errormessage_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errormessage_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void RpcMessage::set_allocated_errormessage(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.errormessage_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errormessage_.IsDefault()) {
          _impl_.errormessage_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protorpc.RpcMessage.errorMessage)
}

// -------------------------------------------------------------------

// Mnfo2uhnf92hvqi2nviouq2hv9puhq

// .google.protobuf.Empty empty = 1;
inline bool Mnfo2uhnf92hvqi2nviouq2hv9puhq::has_empty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.empty_ != nullptr);
  return value;
}
inline const ::google::protobuf::Empty& Mnfo2uhnf92hvqi2nviouq2hv9puhq::_internal_empty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Empty* p = _impl_.empty_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Empty&>(::google::protobuf::_Empty_default_instance_);
}
inline const ::google::protobuf::Empty& Mnfo2uhnf92hvqi2nviouq2hv9puhq::empty() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq.empty)
  return _internal_empty();
}
inline void Mnfo2uhnf92hvqi2nviouq2hv9puhq::unsafe_arena_set_allocated_empty(::google::protobuf::Empty* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.empty_);
  }
  _impl_.empty_ = reinterpret_cast<::google::protobuf::Empty*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq.empty)
}
inline ::google::protobuf::Empty* Mnfo2uhnf92hvqi2nviouq2hv9puhq::release_empty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Empty* released = _impl_.empty_;
  _impl_.empty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Empty* Mnfo2uhnf92hvqi2nviouq2hv9puhq::unsafe_arena_release_empty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq.empty)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Empty* temp = _impl_.empty_;
  _impl_.empty_ = nullptr;
  return temp;
}
inline ::google::protobuf::Empty* Mnfo2uhnf92hvqi2nviouq2hv9puhq::_internal_mutable_empty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.empty_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Empty>(GetArena());
    _impl_.empty_ = reinterpret_cast<::google::protobuf::Empty*>(p);
  }
  return _impl_.empty_;
}
inline ::google::protobuf::Empty* Mnfo2uhnf92hvqi2nviouq2hv9puhq::mutable_empty() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Empty* _msg = _internal_mutable_empty();
  // @@protoc_insertion_point(field_mutable:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq.empty)
  return _msg;
}
inline void Mnfo2uhnf92hvqi2nviouq2hv9puhq::set_allocated_empty(::google::protobuf::Empty* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.empty_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.empty_ = reinterpret_cast<::google::protobuf::Empty*>(value);
  // @@protoc_insertion_point(field_set_allocated:protorpc.Mnfo2uhnf92hvqi2nviouq2hv9puhq.empty)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protorpc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::protorpc::RpcErrorType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protorpc::RpcErrorType>() {
  return ::protorpc::RpcErrorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ProtoRpc_2eproto_2epb_2eh
