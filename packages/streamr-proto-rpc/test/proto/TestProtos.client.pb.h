// generated by the protocol buffer streamr pluging. DO NOT EDIT!
// generated from protobuf file "TestProtos.proto"

#ifndef STREAMR_PROTORPC_TESTPROTOS_CLIENT_PB_H
#define STREAMR_PROTORPC_TESTPROTOS_CLIENT_PB_H

#include <folly/experimental/coro/Task.h>
#include "TestProtos.pb.h" // NOLINT
#include "streamr-proto-rpc/ProtoCallContext.hpp"
#include "streamr-proto-rpc/RpcCommunicator.hpp"


namespace streamr::protorpc {
class DhtRpcServiceClient {
private:
RpcCommunicator& communicator;
public:
    DhtRpcServiceClient(RpcCommunicator& communicator) : communicator(communicator) {}
    folly::coro::Task<ClosestPeersResponse> getClosestPeers(const ClosestPeersRequest& request, const ProtoCallContext& callContext) {
        return communicator.request<ClosestPeersResponse, ClosestPeersRequest>("getClosestPeers", request, callContext);
    }
    folly::coro::Task<PingResponse> ping(const PingRequest& request, const ProtoCallContext& callContext) {
        return communicator.request<PingResponse, PingRequest>("ping", request, callContext);
    }
    folly::coro::Task<RouteMessageAck> routeMessage(const RouteMessageWrapper& request, const ProtoCallContext& callContext) {
        return communicator.request<RouteMessageAck, RouteMessageWrapper>("routeMessage", request, callContext);
    }
}; // class DhtRpcServiceClient
class OptionalServiceClient {
private:
RpcCommunicator& communicator;
public:
    OptionalServiceClient(RpcCommunicator& communicator) : communicator(communicator) {}
    folly::coro::Task<OptionalResponse> getOptional(const OptionalRequest& request, const ProtoCallContext& callContext) {
        return communicator.request<OptionalResponse, OptionalRequest>("getOptional", request, callContext);
    }
}; // class OptionalServiceClient
}; // namespace streamr::protorpc

#endif // STREAMR_PROTORPC_TESTPROTOS_CLIENT_PB_H

