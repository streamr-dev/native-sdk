// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestProtos.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TestProtos_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TestProtos_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TestProtos_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TestProtos_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TestProtos_2eproto;
class ClosestPeersRequest;
struct ClosestPeersRequestDefaultTypeInternal;
extern ClosestPeersRequestDefaultTypeInternal _ClosestPeersRequest_default_instance_;
class ClosestPeersResponse;
struct ClosestPeersResponseDefaultTypeInternal;
extern ClosestPeersResponseDefaultTypeInternal _ClosestPeersResponse_default_instance_;
class ConnectivityMethod;
struct ConnectivityMethodDefaultTypeInternal;
extern ConnectivityMethodDefaultTypeInternal _ConnectivityMethod_default_instance_;
class OptionalRequest;
struct OptionalRequestDefaultTypeInternal;
extern OptionalRequestDefaultTypeInternal _OptionalRequest_default_instance_;
class OptionalResponse;
struct OptionalResponseDefaultTypeInternal;
extern OptionalResponseDefaultTypeInternal _OptionalResponse_default_instance_;
class PeerDescriptor;
struct PeerDescriptorDefaultTypeInternal;
extern PeerDescriptorDefaultTypeInternal _PeerDescriptor_default_instance_;
class PingRequest;
struct PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResponse;
struct PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class RouteMessageAck;
struct RouteMessageAckDefaultTypeInternal;
extern RouteMessageAckDefaultTypeInternal _RouteMessageAck_default_instance_;
class RouteMessageWrapper;
struct RouteMessageWrapperDefaultTypeInternal;
extern RouteMessageWrapperDefaultTypeInternal _RouteMessageWrapper_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClosestPeersRequest* Arena::CreateMaybeMessage<::ClosestPeersRequest>(Arena*);
template<> ::ClosestPeersResponse* Arena::CreateMaybeMessage<::ClosestPeersResponse>(Arena*);
template<> ::ConnectivityMethod* Arena::CreateMaybeMessage<::ConnectivityMethod>(Arena*);
template<> ::OptionalRequest* Arena::CreateMaybeMessage<::OptionalRequest>(Arena*);
template<> ::OptionalResponse* Arena::CreateMaybeMessage<::OptionalResponse>(Arena*);
template<> ::PeerDescriptor* Arena::CreateMaybeMessage<::PeerDescriptor>(Arena*);
template<> ::PingRequest* Arena::CreateMaybeMessage<::PingRequest>(Arena*);
template<> ::PingResponse* Arena::CreateMaybeMessage<::PingResponse>(Arena*);
template<> ::RouteMessageAck* Arena::CreateMaybeMessage<::RouteMessageAck>(Arena*);
template<> ::RouteMessageWrapper* Arena::CreateMaybeMessage<::RouteMessageWrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum NodeType : int {
  NODEJS = 0,
  BROWSER = 1,
  NodeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NodeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NodeType_IsValid(int value);
constexpr NodeType NodeType_MIN = NODEJS;
constexpr NodeType NodeType_MAX = BROWSER;
constexpr int NodeType_ARRAYSIZE = NodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeType_descriptor();
template<typename T>
inline const std::string& NodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeType_descriptor(), enum_t_value);
}
inline bool NodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeType>(
    NodeType_descriptor(), name, value);
}
// ===================================================================

class RouteMessageWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RouteMessageWrapper) */ {
 public:
  inline RouteMessageWrapper() : RouteMessageWrapper(nullptr) {}
  ~RouteMessageWrapper() override;
  explicit PROTOBUF_CONSTEXPR RouteMessageWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteMessageWrapper(const RouteMessageWrapper& from);
  RouteMessageWrapper(RouteMessageWrapper&& from) noexcept
    : RouteMessageWrapper() {
    *this = ::std::move(from);
  }

  inline RouteMessageWrapper& operator=(const RouteMessageWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteMessageWrapper& operator=(RouteMessageWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteMessageWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteMessageWrapper* internal_default_instance() {
    return reinterpret_cast<const RouteMessageWrapper*>(
               &_RouteMessageWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RouteMessageWrapper& a, RouteMessageWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteMessageWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteMessageWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteMessageWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteMessageWrapper>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteMessageWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RouteMessageWrapper";
  }
  protected:
  explicit RouteMessageWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 2,
    kMessageFieldNumber = 5,
    kSourcePeerFieldNumber = 1,
    kDestinationPeerFieldNumber = 3,
    kPreviousPeerFieldNumber = 4,
  };
  // string requestId = 2;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // bytes message = 5;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .PeerDescriptor sourcePeer = 1;
  bool has_sourcepeer() const;
  private:
  bool _internal_has_sourcepeer() const;
  public:
  void clear_sourcepeer();
  const ::PeerDescriptor& sourcepeer() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_sourcepeer();
  ::PeerDescriptor* mutable_sourcepeer();
  void set_allocated_sourcepeer(::PeerDescriptor* sourcepeer);
  private:
  const ::PeerDescriptor& _internal_sourcepeer() const;
  ::PeerDescriptor* _internal_mutable_sourcepeer();
  public:
  void unsafe_arena_set_allocated_sourcepeer(
      ::PeerDescriptor* sourcepeer);
  ::PeerDescriptor* unsafe_arena_release_sourcepeer();

  // .PeerDescriptor destinationPeer = 3;
  bool has_destinationpeer() const;
  private:
  bool _internal_has_destinationpeer() const;
  public:
  void clear_destinationpeer();
  const ::PeerDescriptor& destinationpeer() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_destinationpeer();
  ::PeerDescriptor* mutable_destinationpeer();
  void set_allocated_destinationpeer(::PeerDescriptor* destinationpeer);
  private:
  const ::PeerDescriptor& _internal_destinationpeer() const;
  ::PeerDescriptor* _internal_mutable_destinationpeer();
  public:
  void unsafe_arena_set_allocated_destinationpeer(
      ::PeerDescriptor* destinationpeer);
  ::PeerDescriptor* unsafe_arena_release_destinationpeer();

  // .PeerDescriptor previousPeer = 4;
  bool has_previouspeer() const;
  private:
  bool _internal_has_previouspeer() const;
  public:
  void clear_previouspeer();
  const ::PeerDescriptor& previouspeer() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_previouspeer();
  ::PeerDescriptor* mutable_previouspeer();
  void set_allocated_previouspeer(::PeerDescriptor* previouspeer);
  private:
  const ::PeerDescriptor& _internal_previouspeer() const;
  ::PeerDescriptor* _internal_mutable_previouspeer();
  public:
  void unsafe_arena_set_allocated_previouspeer(
      ::PeerDescriptor* previouspeer);
  ::PeerDescriptor* unsafe_arena_release_previouspeer();

  // @@protoc_insertion_point(class_scope:RouteMessageWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PeerDescriptor* sourcepeer_;
    ::PeerDescriptor* destinationpeer_;
    ::PeerDescriptor* previouspeer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};
// -------------------------------------------------------------------

class RouteMessageAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RouteMessageAck) */ {
 public:
  inline RouteMessageAck() : RouteMessageAck(nullptr) {}
  ~RouteMessageAck() override;
  explicit PROTOBUF_CONSTEXPR RouteMessageAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteMessageAck(const RouteMessageAck& from);
  RouteMessageAck(RouteMessageAck&& from) noexcept
    : RouteMessageAck() {
    *this = ::std::move(from);
  }

  inline RouteMessageAck& operator=(const RouteMessageAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteMessageAck& operator=(RouteMessageAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteMessageAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteMessageAck* internal_default_instance() {
    return reinterpret_cast<const RouteMessageAck*>(
               &_RouteMessageAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RouteMessageAck& a, RouteMessageAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteMessageAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteMessageAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteMessageAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteMessageAck>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteMessageAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RouteMessageAck";
  }
  protected:
  explicit RouteMessageAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 2,
    kErrorFieldNumber = 4,
    kSourcePeerFieldNumber = 1,
    kDestinationPeerFieldNumber = 3,
  };
  // string requestId = 2;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // string error = 4;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .PeerDescriptor sourcePeer = 1;
  bool has_sourcepeer() const;
  private:
  bool _internal_has_sourcepeer() const;
  public:
  void clear_sourcepeer();
  const ::PeerDescriptor& sourcepeer() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_sourcepeer();
  ::PeerDescriptor* mutable_sourcepeer();
  void set_allocated_sourcepeer(::PeerDescriptor* sourcepeer);
  private:
  const ::PeerDescriptor& _internal_sourcepeer() const;
  ::PeerDescriptor* _internal_mutable_sourcepeer();
  public:
  void unsafe_arena_set_allocated_sourcepeer(
      ::PeerDescriptor* sourcepeer);
  ::PeerDescriptor* unsafe_arena_release_sourcepeer();

  // .PeerDescriptor destinationPeer = 3;
  bool has_destinationpeer() const;
  private:
  bool _internal_has_destinationpeer() const;
  public:
  void clear_destinationpeer();
  const ::PeerDescriptor& destinationpeer() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_destinationpeer();
  ::PeerDescriptor* mutable_destinationpeer();
  void set_allocated_destinationpeer(::PeerDescriptor* destinationpeer);
  private:
  const ::PeerDescriptor& _internal_destinationpeer() const;
  ::PeerDescriptor* _internal_mutable_destinationpeer();
  public:
  void unsafe_arena_set_allocated_destinationpeer(
      ::PeerDescriptor* destinationpeer);
  ::PeerDescriptor* unsafe_arena_release_destinationpeer();

  // @@protoc_insertion_point(class_scope:RouteMessageAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::PeerDescriptor* sourcepeer_;
    ::PeerDescriptor* destinationpeer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};
// -------------------------------------------------------------------

class PingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  ~PingRequest() override;
  explicit PROTOBUF_CONSTEXPR PingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingRequest(const PingRequest& from);
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PingRequest";
  }
  protected:
  explicit PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // string requestId = 1;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // @@protoc_insertion_point(class_scope:PingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};
// -------------------------------------------------------------------

class PingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PingResponse) */ {
 public:
  inline PingResponse() : PingResponse(nullptr) {}
  ~PingResponse() override;
  explicit PROTOBUF_CONSTEXPR PingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PingResponse(const PingResponse& from);
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PingResponse";
  }
  protected:
  explicit PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // string requestId = 1;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // @@protoc_insertion_point(class_scope:PingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};
// -------------------------------------------------------------------

class ClosestPeersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClosestPeersRequest) */ {
 public:
  inline ClosestPeersRequest() : ClosestPeersRequest(nullptr) {}
  ~ClosestPeersRequest() override;
  explicit PROTOBUF_CONSTEXPR ClosestPeersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClosestPeersRequest(const ClosestPeersRequest& from);
  ClosestPeersRequest(ClosestPeersRequest&& from) noexcept
    : ClosestPeersRequest() {
    *this = ::std::move(from);
  }

  inline ClosestPeersRequest& operator=(const ClosestPeersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClosestPeersRequest& operator=(ClosestPeersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClosestPeersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClosestPeersRequest* internal_default_instance() {
    return reinterpret_cast<const ClosestPeersRequest*>(
               &_ClosestPeersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClosestPeersRequest& a, ClosestPeersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClosestPeersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClosestPeersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClosestPeersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClosestPeersRequest>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClosestPeersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClosestPeersRequest";
  }
  protected:
  explicit ClosestPeersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 2,
    kPeerDescriptorFieldNumber = 1,
  };
  // string requestId = 2;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // .PeerDescriptor peerDescriptor = 1;
  bool has_peerdescriptor() const;
  private:
  bool _internal_has_peerdescriptor() const;
  public:
  void clear_peerdescriptor();
  const ::PeerDescriptor& peerdescriptor() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_peerdescriptor();
  ::PeerDescriptor* mutable_peerdescriptor();
  void set_allocated_peerdescriptor(::PeerDescriptor* peerdescriptor);
  private:
  const ::PeerDescriptor& _internal_peerdescriptor() const;
  ::PeerDescriptor* _internal_mutable_peerdescriptor();
  public:
  void unsafe_arena_set_allocated_peerdescriptor(
      ::PeerDescriptor* peerdescriptor);
  ::PeerDescriptor* unsafe_arena_release_peerdescriptor();

  // @@protoc_insertion_point(class_scope:ClosestPeersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    ::PeerDescriptor* peerdescriptor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};
// -------------------------------------------------------------------

class ClosestPeersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClosestPeersResponse) */ {
 public:
  inline ClosestPeersResponse() : ClosestPeersResponse(nullptr) {}
  ~ClosestPeersResponse() override;
  explicit PROTOBUF_CONSTEXPR ClosestPeersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClosestPeersResponse(const ClosestPeersResponse& from);
  ClosestPeersResponse(ClosestPeersResponse&& from) noexcept
    : ClosestPeersResponse() {
    *this = ::std::move(from);
  }

  inline ClosestPeersResponse& operator=(const ClosestPeersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClosestPeersResponse& operator=(ClosestPeersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClosestPeersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClosestPeersResponse* internal_default_instance() {
    return reinterpret_cast<const ClosestPeersResponse*>(
               &_ClosestPeersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClosestPeersResponse& a, ClosestPeersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClosestPeersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClosestPeersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClosestPeersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClosestPeersResponse>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClosestPeersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClosestPeersResponse";
  }
  protected:
  explicit ClosestPeersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 1,
    kRequestIdFieldNumber = 2,
  };
  // repeated .PeerDescriptor peers = 1;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::PeerDescriptor* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerDescriptor >*
      mutable_peers();
  private:
  const ::PeerDescriptor& _internal_peers(int index) const;
  ::PeerDescriptor* _internal_add_peers();
  public:
  const ::PeerDescriptor& peers(int index) const;
  ::PeerDescriptor* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerDescriptor >&
      peers() const;

  // string requestId = 2;
  void clear_requestid();
  const std::string& requestid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* requestid);
  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(const std::string& value);
  std::string* _internal_mutable_requestid();
  public:

  // @@protoc_insertion_point(class_scope:ClosestPeersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerDescriptor > peers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};
// -------------------------------------------------------------------

class PeerDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PeerDescriptor) */ {
 public:
  inline PeerDescriptor() : PeerDescriptor(nullptr) {}
  ~PeerDescriptor() override;
  explicit PROTOBUF_CONSTEXPR PeerDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerDescriptor(const PeerDescriptor& from);
  PeerDescriptor(PeerDescriptor&& from) noexcept
    : PeerDescriptor() {
    *this = ::std::move(from);
  }

  inline PeerDescriptor& operator=(const PeerDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerDescriptor& operator=(PeerDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerDescriptor* internal_default_instance() {
    return reinterpret_cast<const PeerDescriptor*>(
               &_PeerDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PeerDescriptor& a, PeerDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerDescriptor>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PeerDescriptor";
  }
  protected:
  explicit PeerDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kUdpFieldNumber = 3,
    kTcpFieldNumber = 4,
    kWebsocketFieldNumber = 5,
    kTypeFieldNumber = 2,
    kOpenInternetFieldNumber = 6,
  };
  // bytes nodeId = 1;
  void clear_nodeid();
  const std::string& nodeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nodeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nodeid();
  PROTOBUF_NODISCARD std::string* release_nodeid();
  void set_allocated_nodeid(std::string* nodeid);
  private:
  const std::string& _internal_nodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodeid(const std::string& value);
  std::string* _internal_mutable_nodeid();
  public:

  // .ConnectivityMethod udp = 3;
  bool has_udp() const;
  private:
  bool _internal_has_udp() const;
  public:
  void clear_udp();
  const ::ConnectivityMethod& udp() const;
  PROTOBUF_NODISCARD ::ConnectivityMethod* release_udp();
  ::ConnectivityMethod* mutable_udp();
  void set_allocated_udp(::ConnectivityMethod* udp);
  private:
  const ::ConnectivityMethod& _internal_udp() const;
  ::ConnectivityMethod* _internal_mutable_udp();
  public:
  void unsafe_arena_set_allocated_udp(
      ::ConnectivityMethod* udp);
  ::ConnectivityMethod* unsafe_arena_release_udp();

  // .ConnectivityMethod tcp = 4;
  bool has_tcp() const;
  private:
  bool _internal_has_tcp() const;
  public:
  void clear_tcp();
  const ::ConnectivityMethod& tcp() const;
  PROTOBUF_NODISCARD ::ConnectivityMethod* release_tcp();
  ::ConnectivityMethod* mutable_tcp();
  void set_allocated_tcp(::ConnectivityMethod* tcp);
  private:
  const ::ConnectivityMethod& _internal_tcp() const;
  ::ConnectivityMethod* _internal_mutable_tcp();
  public:
  void unsafe_arena_set_allocated_tcp(
      ::ConnectivityMethod* tcp);
  ::ConnectivityMethod* unsafe_arena_release_tcp();

  // .ConnectivityMethod websocket = 5;
  bool has_websocket() const;
  private:
  bool _internal_has_websocket() const;
  public:
  void clear_websocket();
  const ::ConnectivityMethod& websocket() const;
  PROTOBUF_NODISCARD ::ConnectivityMethod* release_websocket();
  ::ConnectivityMethod* mutable_websocket();
  void set_allocated_websocket(::ConnectivityMethod* websocket);
  private:
  const ::ConnectivityMethod& _internal_websocket() const;
  ::ConnectivityMethod* _internal_mutable_websocket();
  public:
  void unsafe_arena_set_allocated_websocket(
      ::ConnectivityMethod* websocket);
  ::ConnectivityMethod* unsafe_arena_release_websocket();

  // .NodeType type = 2;
  void clear_type();
  ::NodeType type() const;
  void set_type(::NodeType value);
  private:
  ::NodeType _internal_type() const;
  void _internal_set_type(::NodeType value);
  public:

  // optional bool openInternet = 6;
  bool has_openinternet() const;
  private:
  bool _internal_has_openinternet() const;
  public:
  void clear_openinternet();
  bool openinternet() const;
  void set_openinternet(bool value);
  private:
  bool _internal_openinternet() const;
  void _internal_set_openinternet(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PeerDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeid_;
    ::ConnectivityMethod* udp_;
    ::ConnectivityMethod* tcp_;
    ::ConnectivityMethod* websocket_;
    int type_;
    bool openinternet_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};
// -------------------------------------------------------------------

class ConnectivityMethod final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ConnectivityMethod) */ {
 public:
  inline ConnectivityMethod() : ConnectivityMethod(nullptr) {}
  ~ConnectivityMethod() override;
  explicit PROTOBUF_CONSTEXPR ConnectivityMethod(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectivityMethod(const ConnectivityMethod& from);
  ConnectivityMethod(ConnectivityMethod&& from) noexcept
    : ConnectivityMethod() {
    *this = ::std::move(from);
  }

  inline ConnectivityMethod& operator=(const ConnectivityMethod& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectivityMethod& operator=(ConnectivityMethod&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectivityMethod& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectivityMethod* internal_default_instance() {
    return reinterpret_cast<const ConnectivityMethod*>(
               &_ConnectivityMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConnectivityMethod& a, ConnectivityMethod& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectivityMethod* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectivityMethod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectivityMethod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectivityMethod>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectivityMethod* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ConnectivityMethod";
  }
  protected:
  explicit ConnectivityMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kPortFieldNumber = 2,
  };
  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ConnectivityMethod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};
// -------------------------------------------------------------------

class OptionalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OptionalRequest) */ {
 public:
  inline OptionalRequest() : OptionalRequest(nullptr) {}
  ~OptionalRequest() override;
  explicit PROTOBUF_CONSTEXPR OptionalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionalRequest(const OptionalRequest& from);
  OptionalRequest(OptionalRequest&& from) noexcept
    : OptionalRequest() {
    *this = ::std::move(from);
  }

  inline OptionalRequest& operator=(const OptionalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalRequest& operator=(OptionalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionalRequest* internal_default_instance() {
    return reinterpret_cast<const OptionalRequest*>(
               &_OptionalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OptionalRequest& a, OptionalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionalRequest>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionalRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OptionalRequest";
  }
  protected:
  explicit OptionalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeOptionalFieldFieldNumber = 1,
  };
  // optional string someOptionalField = 1;
  bool has_someoptionalfield() const;
  private:
  bool _internal_has_someoptionalfield() const;
  public:
  void clear_someoptionalfield();
  const std::string& someoptionalfield() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_someoptionalfield(ArgT0&& arg0, ArgT... args);
  std::string* mutable_someoptionalfield();
  PROTOBUF_NODISCARD std::string* release_someoptionalfield();
  void set_allocated_someoptionalfield(std::string* someoptionalfield);
  private:
  const std::string& _internal_someoptionalfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_someoptionalfield(const std::string& value);
  std::string* _internal_mutable_someoptionalfield();
  public:

  // @@protoc_insertion_point(class_scope:OptionalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr someoptionalfield_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};
// -------------------------------------------------------------------

class OptionalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OptionalResponse) */ {
 public:
  inline OptionalResponse() : OptionalResponse(nullptr) {}
  ~OptionalResponse() override;
  explicit PROTOBUF_CONSTEXPR OptionalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionalResponse(const OptionalResponse& from);
  OptionalResponse(OptionalResponse&& from) noexcept
    : OptionalResponse() {
    *this = ::std::move(from);
  }

  inline OptionalResponse& operator=(const OptionalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalResponse& operator=(OptionalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionalResponse* internal_default_instance() {
    return reinterpret_cast<const OptionalResponse*>(
               &_OptionalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OptionalResponse& a, OptionalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionalResponse>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionalResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OptionalResponse";
  }
  protected:
  explicit OptionalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeOptionalFieldFieldNumber = 1,
  };
  // optional string someOptionalField = 1;
  bool has_someoptionalfield() const;
  private:
  bool _internal_has_someoptionalfield() const;
  public:
  void clear_someoptionalfield();
  const std::string& someoptionalfield() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_someoptionalfield(ArgT0&& arg0, ArgT... args);
  std::string* mutable_someoptionalfield();
  PROTOBUF_NODISCARD std::string* release_someoptionalfield();
  void set_allocated_someoptionalfield(std::string* someoptionalfield);
  private:
  const std::string& _internal_someoptionalfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_someoptionalfield(const std::string& value);
  std::string* _internal_mutable_someoptionalfield();
  public:

  // @@protoc_insertion_point(class_scope:OptionalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr someoptionalfield_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RouteMessageWrapper

// .PeerDescriptor sourcePeer = 1;
inline bool RouteMessageWrapper::_internal_has_sourcepeer() const {
  return this != internal_default_instance() && _impl_.sourcepeer_ != nullptr;
}
inline bool RouteMessageWrapper::has_sourcepeer() const {
  return _internal_has_sourcepeer();
}
inline void RouteMessageWrapper::clear_sourcepeer() {
  if (GetArenaForAllocation() == nullptr && _impl_.sourcepeer_ != nullptr) {
    delete _impl_.sourcepeer_;
  }
  _impl_.sourcepeer_ = nullptr;
}
inline const ::PeerDescriptor& RouteMessageWrapper::_internal_sourcepeer() const {
  const ::PeerDescriptor* p = _impl_.sourcepeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(
      ::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& RouteMessageWrapper::sourcepeer() const {
  // @@protoc_insertion_point(field_get:RouteMessageWrapper.sourcePeer)
  return _internal_sourcepeer();
}
inline void RouteMessageWrapper::unsafe_arena_set_allocated_sourcepeer(
    ::PeerDescriptor* sourcepeer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sourcepeer_);
  }
  _impl_.sourcepeer_ = sourcepeer;
  if (sourcepeer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RouteMessageWrapper.sourcePeer)
}
inline ::PeerDescriptor* RouteMessageWrapper::release_sourcepeer() {
  
  ::PeerDescriptor* temp = _impl_.sourcepeer_;
  _impl_.sourcepeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PeerDescriptor* RouteMessageWrapper::unsafe_arena_release_sourcepeer() {
  // @@protoc_insertion_point(field_release:RouteMessageWrapper.sourcePeer)
  
  ::PeerDescriptor* temp = _impl_.sourcepeer_;
  _impl_.sourcepeer_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* RouteMessageWrapper::_internal_mutable_sourcepeer() {
  
  if (_impl_.sourcepeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArenaForAllocation());
    _impl_.sourcepeer_ = p;
  }
  return _impl_.sourcepeer_;
}
inline ::PeerDescriptor* RouteMessageWrapper::mutable_sourcepeer() {
  ::PeerDescriptor* _msg = _internal_mutable_sourcepeer();
  // @@protoc_insertion_point(field_mutable:RouteMessageWrapper.sourcePeer)
  return _msg;
}
inline void RouteMessageWrapper::set_allocated_sourcepeer(::PeerDescriptor* sourcepeer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sourcepeer_;
  }
  if (sourcepeer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sourcepeer);
    if (message_arena != submessage_arena) {
      sourcepeer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourcepeer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sourcepeer_ = sourcepeer;
  // @@protoc_insertion_point(field_set_allocated:RouteMessageWrapper.sourcePeer)
}

// string requestId = 2;
inline void RouteMessageWrapper::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& RouteMessageWrapper::requestid() const {
  // @@protoc_insertion_point(field_get:RouteMessageWrapper.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteMessageWrapper::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RouteMessageWrapper.requestId)
}
inline std::string* RouteMessageWrapper::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:RouteMessageWrapper.requestId)
  return _s;
}
inline const std::string& RouteMessageWrapper::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void RouteMessageWrapper::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteMessageWrapper::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteMessageWrapper::release_requestid() {
  // @@protoc_insertion_point(field_release:RouteMessageWrapper.requestId)
  return _impl_.requestid_.Release();
}
inline void RouteMessageWrapper::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RouteMessageWrapper.requestId)
}

// .PeerDescriptor destinationPeer = 3;
inline bool RouteMessageWrapper::_internal_has_destinationpeer() const {
  return this != internal_default_instance() && _impl_.destinationpeer_ != nullptr;
}
inline bool RouteMessageWrapper::has_destinationpeer() const {
  return _internal_has_destinationpeer();
}
inline void RouteMessageWrapper::clear_destinationpeer() {
  if (GetArenaForAllocation() == nullptr && _impl_.destinationpeer_ != nullptr) {
    delete _impl_.destinationpeer_;
  }
  _impl_.destinationpeer_ = nullptr;
}
inline const ::PeerDescriptor& RouteMessageWrapper::_internal_destinationpeer() const {
  const ::PeerDescriptor* p = _impl_.destinationpeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(
      ::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& RouteMessageWrapper::destinationpeer() const {
  // @@protoc_insertion_point(field_get:RouteMessageWrapper.destinationPeer)
  return _internal_destinationpeer();
}
inline void RouteMessageWrapper::unsafe_arena_set_allocated_destinationpeer(
    ::PeerDescriptor* destinationpeer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destinationpeer_);
  }
  _impl_.destinationpeer_ = destinationpeer;
  if (destinationpeer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RouteMessageWrapper.destinationPeer)
}
inline ::PeerDescriptor* RouteMessageWrapper::release_destinationpeer() {
  
  ::PeerDescriptor* temp = _impl_.destinationpeer_;
  _impl_.destinationpeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PeerDescriptor* RouteMessageWrapper::unsafe_arena_release_destinationpeer() {
  // @@protoc_insertion_point(field_release:RouteMessageWrapper.destinationPeer)
  
  ::PeerDescriptor* temp = _impl_.destinationpeer_;
  _impl_.destinationpeer_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* RouteMessageWrapper::_internal_mutable_destinationpeer() {
  
  if (_impl_.destinationpeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArenaForAllocation());
    _impl_.destinationpeer_ = p;
  }
  return _impl_.destinationpeer_;
}
inline ::PeerDescriptor* RouteMessageWrapper::mutable_destinationpeer() {
  ::PeerDescriptor* _msg = _internal_mutable_destinationpeer();
  // @@protoc_insertion_point(field_mutable:RouteMessageWrapper.destinationPeer)
  return _msg;
}
inline void RouteMessageWrapper::set_allocated_destinationpeer(::PeerDescriptor* destinationpeer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destinationpeer_;
  }
  if (destinationpeer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destinationpeer);
    if (message_arena != submessage_arena) {
      destinationpeer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destinationpeer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destinationpeer_ = destinationpeer;
  // @@protoc_insertion_point(field_set_allocated:RouteMessageWrapper.destinationPeer)
}

// .PeerDescriptor previousPeer = 4;
inline bool RouteMessageWrapper::_internal_has_previouspeer() const {
  return this != internal_default_instance() && _impl_.previouspeer_ != nullptr;
}
inline bool RouteMessageWrapper::has_previouspeer() const {
  return _internal_has_previouspeer();
}
inline void RouteMessageWrapper::clear_previouspeer() {
  if (GetArenaForAllocation() == nullptr && _impl_.previouspeer_ != nullptr) {
    delete _impl_.previouspeer_;
  }
  _impl_.previouspeer_ = nullptr;
}
inline const ::PeerDescriptor& RouteMessageWrapper::_internal_previouspeer() const {
  const ::PeerDescriptor* p = _impl_.previouspeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(
      ::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& RouteMessageWrapper::previouspeer() const {
  // @@protoc_insertion_point(field_get:RouteMessageWrapper.previousPeer)
  return _internal_previouspeer();
}
inline void RouteMessageWrapper::unsafe_arena_set_allocated_previouspeer(
    ::PeerDescriptor* previouspeer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.previouspeer_);
  }
  _impl_.previouspeer_ = previouspeer;
  if (previouspeer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RouteMessageWrapper.previousPeer)
}
inline ::PeerDescriptor* RouteMessageWrapper::release_previouspeer() {
  
  ::PeerDescriptor* temp = _impl_.previouspeer_;
  _impl_.previouspeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PeerDescriptor* RouteMessageWrapper::unsafe_arena_release_previouspeer() {
  // @@protoc_insertion_point(field_release:RouteMessageWrapper.previousPeer)
  
  ::PeerDescriptor* temp = _impl_.previouspeer_;
  _impl_.previouspeer_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* RouteMessageWrapper::_internal_mutable_previouspeer() {
  
  if (_impl_.previouspeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArenaForAllocation());
    _impl_.previouspeer_ = p;
  }
  return _impl_.previouspeer_;
}
inline ::PeerDescriptor* RouteMessageWrapper::mutable_previouspeer() {
  ::PeerDescriptor* _msg = _internal_mutable_previouspeer();
  // @@protoc_insertion_point(field_mutable:RouteMessageWrapper.previousPeer)
  return _msg;
}
inline void RouteMessageWrapper::set_allocated_previouspeer(::PeerDescriptor* previouspeer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.previouspeer_;
  }
  if (previouspeer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(previouspeer);
    if (message_arena != submessage_arena) {
      previouspeer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previouspeer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.previouspeer_ = previouspeer;
  // @@protoc_insertion_point(field_set_allocated:RouteMessageWrapper.previousPeer)
}

// bytes message = 5;
inline void RouteMessageWrapper::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RouteMessageWrapper::message() const {
  // @@protoc_insertion_point(field_get:RouteMessageWrapper.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteMessageWrapper::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RouteMessageWrapper.message)
}
inline std::string* RouteMessageWrapper::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:RouteMessageWrapper.message)
  return _s;
}
inline const std::string& RouteMessageWrapper::_internal_message() const {
  return _impl_.message_.Get();
}
inline void RouteMessageWrapper::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteMessageWrapper::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteMessageWrapper::release_message() {
  // @@protoc_insertion_point(field_release:RouteMessageWrapper.message)
  return _impl_.message_.Release();
}
inline void RouteMessageWrapper::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RouteMessageWrapper.message)
}

// -------------------------------------------------------------------

// RouteMessageAck

// .PeerDescriptor sourcePeer = 1;
inline bool RouteMessageAck::_internal_has_sourcepeer() const {
  return this != internal_default_instance() && _impl_.sourcepeer_ != nullptr;
}
inline bool RouteMessageAck::has_sourcepeer() const {
  return _internal_has_sourcepeer();
}
inline void RouteMessageAck::clear_sourcepeer() {
  if (GetArenaForAllocation() == nullptr && _impl_.sourcepeer_ != nullptr) {
    delete _impl_.sourcepeer_;
  }
  _impl_.sourcepeer_ = nullptr;
}
inline const ::PeerDescriptor& RouteMessageAck::_internal_sourcepeer() const {
  const ::PeerDescriptor* p = _impl_.sourcepeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(
      ::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& RouteMessageAck::sourcepeer() const {
  // @@protoc_insertion_point(field_get:RouteMessageAck.sourcePeer)
  return _internal_sourcepeer();
}
inline void RouteMessageAck::unsafe_arena_set_allocated_sourcepeer(
    ::PeerDescriptor* sourcepeer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sourcepeer_);
  }
  _impl_.sourcepeer_ = sourcepeer;
  if (sourcepeer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RouteMessageAck.sourcePeer)
}
inline ::PeerDescriptor* RouteMessageAck::release_sourcepeer() {
  
  ::PeerDescriptor* temp = _impl_.sourcepeer_;
  _impl_.sourcepeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PeerDescriptor* RouteMessageAck::unsafe_arena_release_sourcepeer() {
  // @@protoc_insertion_point(field_release:RouteMessageAck.sourcePeer)
  
  ::PeerDescriptor* temp = _impl_.sourcepeer_;
  _impl_.sourcepeer_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* RouteMessageAck::_internal_mutable_sourcepeer() {
  
  if (_impl_.sourcepeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArenaForAllocation());
    _impl_.sourcepeer_ = p;
  }
  return _impl_.sourcepeer_;
}
inline ::PeerDescriptor* RouteMessageAck::mutable_sourcepeer() {
  ::PeerDescriptor* _msg = _internal_mutable_sourcepeer();
  // @@protoc_insertion_point(field_mutable:RouteMessageAck.sourcePeer)
  return _msg;
}
inline void RouteMessageAck::set_allocated_sourcepeer(::PeerDescriptor* sourcepeer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sourcepeer_;
  }
  if (sourcepeer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sourcepeer);
    if (message_arena != submessage_arena) {
      sourcepeer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourcepeer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sourcepeer_ = sourcepeer;
  // @@protoc_insertion_point(field_set_allocated:RouteMessageAck.sourcePeer)
}

// string requestId = 2;
inline void RouteMessageAck::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& RouteMessageAck::requestid() const {
  // @@protoc_insertion_point(field_get:RouteMessageAck.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteMessageAck::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RouteMessageAck.requestId)
}
inline std::string* RouteMessageAck::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:RouteMessageAck.requestId)
  return _s;
}
inline const std::string& RouteMessageAck::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void RouteMessageAck::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteMessageAck::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteMessageAck::release_requestid() {
  // @@protoc_insertion_point(field_release:RouteMessageAck.requestId)
  return _impl_.requestid_.Release();
}
inline void RouteMessageAck::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RouteMessageAck.requestId)
}

// .PeerDescriptor destinationPeer = 3;
inline bool RouteMessageAck::_internal_has_destinationpeer() const {
  return this != internal_default_instance() && _impl_.destinationpeer_ != nullptr;
}
inline bool RouteMessageAck::has_destinationpeer() const {
  return _internal_has_destinationpeer();
}
inline void RouteMessageAck::clear_destinationpeer() {
  if (GetArenaForAllocation() == nullptr && _impl_.destinationpeer_ != nullptr) {
    delete _impl_.destinationpeer_;
  }
  _impl_.destinationpeer_ = nullptr;
}
inline const ::PeerDescriptor& RouteMessageAck::_internal_destinationpeer() const {
  const ::PeerDescriptor* p = _impl_.destinationpeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(
      ::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& RouteMessageAck::destinationpeer() const {
  // @@protoc_insertion_point(field_get:RouteMessageAck.destinationPeer)
  return _internal_destinationpeer();
}
inline void RouteMessageAck::unsafe_arena_set_allocated_destinationpeer(
    ::PeerDescriptor* destinationpeer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destinationpeer_);
  }
  _impl_.destinationpeer_ = destinationpeer;
  if (destinationpeer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RouteMessageAck.destinationPeer)
}
inline ::PeerDescriptor* RouteMessageAck::release_destinationpeer() {
  
  ::PeerDescriptor* temp = _impl_.destinationpeer_;
  _impl_.destinationpeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PeerDescriptor* RouteMessageAck::unsafe_arena_release_destinationpeer() {
  // @@protoc_insertion_point(field_release:RouteMessageAck.destinationPeer)
  
  ::PeerDescriptor* temp = _impl_.destinationpeer_;
  _impl_.destinationpeer_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* RouteMessageAck::_internal_mutable_destinationpeer() {
  
  if (_impl_.destinationpeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArenaForAllocation());
    _impl_.destinationpeer_ = p;
  }
  return _impl_.destinationpeer_;
}
inline ::PeerDescriptor* RouteMessageAck::mutable_destinationpeer() {
  ::PeerDescriptor* _msg = _internal_mutable_destinationpeer();
  // @@protoc_insertion_point(field_mutable:RouteMessageAck.destinationPeer)
  return _msg;
}
inline void RouteMessageAck::set_allocated_destinationpeer(::PeerDescriptor* destinationpeer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destinationpeer_;
  }
  if (destinationpeer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destinationpeer);
    if (message_arena != submessage_arena) {
      destinationpeer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destinationpeer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destinationpeer_ = destinationpeer;
  // @@protoc_insertion_point(field_set_allocated:RouteMessageAck.destinationPeer)
}

// string error = 4;
inline void RouteMessageAck::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& RouteMessageAck::error() const {
  // @@protoc_insertion_point(field_get:RouteMessageAck.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteMessageAck::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RouteMessageAck.error)
}
inline std::string* RouteMessageAck::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:RouteMessageAck.error)
  return _s;
}
inline const std::string& RouteMessageAck::_internal_error() const {
  return _impl_.error_.Get();
}
inline void RouteMessageAck::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteMessageAck::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteMessageAck::release_error() {
  // @@protoc_insertion_point(field_release:RouteMessageAck.error)
  return _impl_.error_.Release();
}
inline void RouteMessageAck::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RouteMessageAck.error)
}

// -------------------------------------------------------------------

// PingRequest

// string requestId = 1;
inline void PingRequest::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& PingRequest::requestid() const {
  // @@protoc_insertion_point(field_get:PingRequest.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PingRequest::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PingRequest.requestId)
}
inline std::string* PingRequest::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:PingRequest.requestId)
  return _s;
}
inline const std::string& PingRequest::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void PingRequest::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* PingRequest::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* PingRequest::release_requestid() {
  // @@protoc_insertion_point(field_release:PingRequest.requestId)
  return _impl_.requestid_.Release();
}
inline void PingRequest::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PingRequest.requestId)
}

// -------------------------------------------------------------------

// PingResponse

// string requestId = 1;
inline void PingResponse::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& PingResponse::requestid() const {
  // @@protoc_insertion_point(field_get:PingResponse.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PingResponse::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PingResponse.requestId)
}
inline std::string* PingResponse::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:PingResponse.requestId)
  return _s;
}
inline const std::string& PingResponse::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void PingResponse::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* PingResponse::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* PingResponse::release_requestid() {
  // @@protoc_insertion_point(field_release:PingResponse.requestId)
  return _impl_.requestid_.Release();
}
inline void PingResponse::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PingResponse.requestId)
}

// -------------------------------------------------------------------

// ClosestPeersRequest

// .PeerDescriptor peerDescriptor = 1;
inline bool ClosestPeersRequest::_internal_has_peerdescriptor() const {
  return this != internal_default_instance() && _impl_.peerdescriptor_ != nullptr;
}
inline bool ClosestPeersRequest::has_peerdescriptor() const {
  return _internal_has_peerdescriptor();
}
inline void ClosestPeersRequest::clear_peerdescriptor() {
  if (GetArenaForAllocation() == nullptr && _impl_.peerdescriptor_ != nullptr) {
    delete _impl_.peerdescriptor_;
  }
  _impl_.peerdescriptor_ = nullptr;
}
inline const ::PeerDescriptor& ClosestPeersRequest::_internal_peerdescriptor() const {
  const ::PeerDescriptor* p = _impl_.peerdescriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(
      ::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& ClosestPeersRequest::peerdescriptor() const {
  // @@protoc_insertion_point(field_get:ClosestPeersRequest.peerDescriptor)
  return _internal_peerdescriptor();
}
inline void ClosestPeersRequest::unsafe_arena_set_allocated_peerdescriptor(
    ::PeerDescriptor* peerdescriptor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.peerdescriptor_);
  }
  _impl_.peerdescriptor_ = peerdescriptor;
  if (peerdescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClosestPeersRequest.peerDescriptor)
}
inline ::PeerDescriptor* ClosestPeersRequest::release_peerdescriptor() {
  
  ::PeerDescriptor* temp = _impl_.peerdescriptor_;
  _impl_.peerdescriptor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PeerDescriptor* ClosestPeersRequest::unsafe_arena_release_peerdescriptor() {
  // @@protoc_insertion_point(field_release:ClosestPeersRequest.peerDescriptor)
  
  ::PeerDescriptor* temp = _impl_.peerdescriptor_;
  _impl_.peerdescriptor_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* ClosestPeersRequest::_internal_mutable_peerdescriptor() {
  
  if (_impl_.peerdescriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArenaForAllocation());
    _impl_.peerdescriptor_ = p;
  }
  return _impl_.peerdescriptor_;
}
inline ::PeerDescriptor* ClosestPeersRequest::mutable_peerdescriptor() {
  ::PeerDescriptor* _msg = _internal_mutable_peerdescriptor();
  // @@protoc_insertion_point(field_mutable:ClosestPeersRequest.peerDescriptor)
  return _msg;
}
inline void ClosestPeersRequest::set_allocated_peerdescriptor(::PeerDescriptor* peerdescriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.peerdescriptor_;
  }
  if (peerdescriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(peerdescriptor);
    if (message_arena != submessage_arena) {
      peerdescriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peerdescriptor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.peerdescriptor_ = peerdescriptor;
  // @@protoc_insertion_point(field_set_allocated:ClosestPeersRequest.peerDescriptor)
}

// string requestId = 2;
inline void ClosestPeersRequest::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& ClosestPeersRequest::requestid() const {
  // @@protoc_insertion_point(field_get:ClosestPeersRequest.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClosestPeersRequest::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClosestPeersRequest.requestId)
}
inline std::string* ClosestPeersRequest::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:ClosestPeersRequest.requestId)
  return _s;
}
inline const std::string& ClosestPeersRequest::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void ClosestPeersRequest::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* ClosestPeersRequest::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* ClosestPeersRequest::release_requestid() {
  // @@protoc_insertion_point(field_release:ClosestPeersRequest.requestId)
  return _impl_.requestid_.Release();
}
inline void ClosestPeersRequest::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClosestPeersRequest.requestId)
}

// -------------------------------------------------------------------

// ClosestPeersResponse

// repeated .PeerDescriptor peers = 1;
inline int ClosestPeersResponse::_internal_peers_size() const {
  return _impl_.peers_.size();
}
inline int ClosestPeersResponse::peers_size() const {
  return _internal_peers_size();
}
inline void ClosestPeersResponse::clear_peers() {
  _impl_.peers_.Clear();
}
inline ::PeerDescriptor* ClosestPeersResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:ClosestPeersResponse.peers)
  return _impl_.peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerDescriptor >*
ClosestPeersResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:ClosestPeersResponse.peers)
  return &_impl_.peers_;
}
inline const ::PeerDescriptor& ClosestPeersResponse::_internal_peers(int index) const {
  return _impl_.peers_.Get(index);
}
inline const ::PeerDescriptor& ClosestPeersResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:ClosestPeersResponse.peers)
  return _internal_peers(index);
}
inline ::PeerDescriptor* ClosestPeersResponse::_internal_add_peers() {
  return _impl_.peers_.Add();
}
inline ::PeerDescriptor* ClosestPeersResponse::add_peers() {
  ::PeerDescriptor* _add = _internal_add_peers();
  // @@protoc_insertion_point(field_add:ClosestPeersResponse.peers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PeerDescriptor >&
ClosestPeersResponse::peers() const {
  // @@protoc_insertion_point(field_list:ClosestPeersResponse.peers)
  return _impl_.peers_;
}

// string requestId = 2;
inline void ClosestPeersResponse::clear_requestid() {
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& ClosestPeersResponse::requestid() const {
  // @@protoc_insertion_point(field_get:ClosestPeersResponse.requestId)
  return _internal_requestid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClosestPeersResponse::set_requestid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.requestid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ClosestPeersResponse.requestId)
}
inline std::string* ClosestPeersResponse::mutable_requestid() {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:ClosestPeersResponse.requestId)
  return _s;
}
inline const std::string& ClosestPeersResponse::_internal_requestid() const {
  return _impl_.requestid_.Get();
}
inline void ClosestPeersResponse::_internal_set_requestid(const std::string& value) {
  
  _impl_.requestid_.Set(value, GetArenaForAllocation());
}
inline std::string* ClosestPeersResponse::_internal_mutable_requestid() {
  
  return _impl_.requestid_.Mutable(GetArenaForAllocation());
}
inline std::string* ClosestPeersResponse::release_requestid() {
  // @@protoc_insertion_point(field_release:ClosestPeersResponse.requestId)
  return _impl_.requestid_.Release();
}
inline void ClosestPeersResponse::set_allocated_requestid(std::string* requestid) {
  if (requestid != nullptr) {
    
  } else {
    
  }
  _impl_.requestid_.SetAllocated(requestid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestid_.IsDefault()) {
    _impl_.requestid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClosestPeersResponse.requestId)
}

// -------------------------------------------------------------------

// PeerDescriptor

// bytes nodeId = 1;
inline void PeerDescriptor::clear_nodeid() {
  _impl_.nodeid_.ClearToEmpty();
}
inline const std::string& PeerDescriptor::nodeid() const {
  // @@protoc_insertion_point(field_get:PeerDescriptor.nodeId)
  return _internal_nodeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerDescriptor::set_nodeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nodeid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PeerDescriptor.nodeId)
}
inline std::string* PeerDescriptor::mutable_nodeid() {
  std::string* _s = _internal_mutable_nodeid();
  // @@protoc_insertion_point(field_mutable:PeerDescriptor.nodeId)
  return _s;
}
inline const std::string& PeerDescriptor::_internal_nodeid() const {
  return _impl_.nodeid_.Get();
}
inline void PeerDescriptor::_internal_set_nodeid(const std::string& value) {
  
  _impl_.nodeid_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerDescriptor::_internal_mutable_nodeid() {
  
  return _impl_.nodeid_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerDescriptor::release_nodeid() {
  // @@protoc_insertion_point(field_release:PeerDescriptor.nodeId)
  return _impl_.nodeid_.Release();
}
inline void PeerDescriptor::set_allocated_nodeid(std::string* nodeid) {
  if (nodeid != nullptr) {
    
  } else {
    
  }
  _impl_.nodeid_.SetAllocated(nodeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nodeid_.IsDefault()) {
    _impl_.nodeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PeerDescriptor.nodeId)
}

// .NodeType type = 2;
inline void PeerDescriptor::clear_type() {
  _impl_.type_ = 0;
}
inline ::NodeType PeerDescriptor::_internal_type() const {
  return static_cast< ::NodeType >(_impl_.type_);
}
inline ::NodeType PeerDescriptor::type() const {
  // @@protoc_insertion_point(field_get:PeerDescriptor.type)
  return _internal_type();
}
inline void PeerDescriptor::_internal_set_type(::NodeType value) {
  
  _impl_.type_ = value;
}
inline void PeerDescriptor::set_type(::NodeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PeerDescriptor.type)
}

// .ConnectivityMethod udp = 3;
inline bool PeerDescriptor::_internal_has_udp() const {
  return this != internal_default_instance() && _impl_.udp_ != nullptr;
}
inline bool PeerDescriptor::has_udp() const {
  return _internal_has_udp();
}
inline void PeerDescriptor::clear_udp() {
  if (GetArenaForAllocation() == nullptr && _impl_.udp_ != nullptr) {
    delete _impl_.udp_;
  }
  _impl_.udp_ = nullptr;
}
inline const ::ConnectivityMethod& PeerDescriptor::_internal_udp() const {
  const ::ConnectivityMethod* p = _impl_.udp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ConnectivityMethod&>(
      ::_ConnectivityMethod_default_instance_);
}
inline const ::ConnectivityMethod& PeerDescriptor::udp() const {
  // @@protoc_insertion_point(field_get:PeerDescriptor.udp)
  return _internal_udp();
}
inline void PeerDescriptor::unsafe_arena_set_allocated_udp(
    ::ConnectivityMethod* udp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.udp_);
  }
  _impl_.udp_ = udp;
  if (udp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PeerDescriptor.udp)
}
inline ::ConnectivityMethod* PeerDescriptor::release_udp() {
  
  ::ConnectivityMethod* temp = _impl_.udp_;
  _impl_.udp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ConnectivityMethod* PeerDescriptor::unsafe_arena_release_udp() {
  // @@protoc_insertion_point(field_release:PeerDescriptor.udp)
  
  ::ConnectivityMethod* temp = _impl_.udp_;
  _impl_.udp_ = nullptr;
  return temp;
}
inline ::ConnectivityMethod* PeerDescriptor::_internal_mutable_udp() {
  
  if (_impl_.udp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConnectivityMethod>(GetArenaForAllocation());
    _impl_.udp_ = p;
  }
  return _impl_.udp_;
}
inline ::ConnectivityMethod* PeerDescriptor::mutable_udp() {
  ::ConnectivityMethod* _msg = _internal_mutable_udp();
  // @@protoc_insertion_point(field_mutable:PeerDescriptor.udp)
  return _msg;
}
inline void PeerDescriptor::set_allocated_udp(::ConnectivityMethod* udp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.udp_;
  }
  if (udp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(udp);
    if (message_arena != submessage_arena) {
      udp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, udp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.udp_ = udp;
  // @@protoc_insertion_point(field_set_allocated:PeerDescriptor.udp)
}

// .ConnectivityMethod tcp = 4;
inline bool PeerDescriptor::_internal_has_tcp() const {
  return this != internal_default_instance() && _impl_.tcp_ != nullptr;
}
inline bool PeerDescriptor::has_tcp() const {
  return _internal_has_tcp();
}
inline void PeerDescriptor::clear_tcp() {
  if (GetArenaForAllocation() == nullptr && _impl_.tcp_ != nullptr) {
    delete _impl_.tcp_;
  }
  _impl_.tcp_ = nullptr;
}
inline const ::ConnectivityMethod& PeerDescriptor::_internal_tcp() const {
  const ::ConnectivityMethod* p = _impl_.tcp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ConnectivityMethod&>(
      ::_ConnectivityMethod_default_instance_);
}
inline const ::ConnectivityMethod& PeerDescriptor::tcp() const {
  // @@protoc_insertion_point(field_get:PeerDescriptor.tcp)
  return _internal_tcp();
}
inline void PeerDescriptor::unsafe_arena_set_allocated_tcp(
    ::ConnectivityMethod* tcp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tcp_);
  }
  _impl_.tcp_ = tcp;
  if (tcp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PeerDescriptor.tcp)
}
inline ::ConnectivityMethod* PeerDescriptor::release_tcp() {
  
  ::ConnectivityMethod* temp = _impl_.tcp_;
  _impl_.tcp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ConnectivityMethod* PeerDescriptor::unsafe_arena_release_tcp() {
  // @@protoc_insertion_point(field_release:PeerDescriptor.tcp)
  
  ::ConnectivityMethod* temp = _impl_.tcp_;
  _impl_.tcp_ = nullptr;
  return temp;
}
inline ::ConnectivityMethod* PeerDescriptor::_internal_mutable_tcp() {
  
  if (_impl_.tcp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConnectivityMethod>(GetArenaForAllocation());
    _impl_.tcp_ = p;
  }
  return _impl_.tcp_;
}
inline ::ConnectivityMethod* PeerDescriptor::mutable_tcp() {
  ::ConnectivityMethod* _msg = _internal_mutable_tcp();
  // @@protoc_insertion_point(field_mutable:PeerDescriptor.tcp)
  return _msg;
}
inline void PeerDescriptor::set_allocated_tcp(::ConnectivityMethod* tcp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tcp_;
  }
  if (tcp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tcp);
    if (message_arena != submessage_arena) {
      tcp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tcp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tcp_ = tcp;
  // @@protoc_insertion_point(field_set_allocated:PeerDescriptor.tcp)
}

// .ConnectivityMethod websocket = 5;
inline bool PeerDescriptor::_internal_has_websocket() const {
  return this != internal_default_instance() && _impl_.websocket_ != nullptr;
}
inline bool PeerDescriptor::has_websocket() const {
  return _internal_has_websocket();
}
inline void PeerDescriptor::clear_websocket() {
  if (GetArenaForAllocation() == nullptr && _impl_.websocket_ != nullptr) {
    delete _impl_.websocket_;
  }
  _impl_.websocket_ = nullptr;
}
inline const ::ConnectivityMethod& PeerDescriptor::_internal_websocket() const {
  const ::ConnectivityMethod* p = _impl_.websocket_;
  return p != nullptr ? *p : reinterpret_cast<const ::ConnectivityMethod&>(
      ::_ConnectivityMethod_default_instance_);
}
inline const ::ConnectivityMethod& PeerDescriptor::websocket() const {
  // @@protoc_insertion_point(field_get:PeerDescriptor.websocket)
  return _internal_websocket();
}
inline void PeerDescriptor::unsafe_arena_set_allocated_websocket(
    ::ConnectivityMethod* websocket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.websocket_);
  }
  _impl_.websocket_ = websocket;
  if (websocket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PeerDescriptor.websocket)
}
inline ::ConnectivityMethod* PeerDescriptor::release_websocket() {
  
  ::ConnectivityMethod* temp = _impl_.websocket_;
  _impl_.websocket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ConnectivityMethod* PeerDescriptor::unsafe_arena_release_websocket() {
  // @@protoc_insertion_point(field_release:PeerDescriptor.websocket)
  
  ::ConnectivityMethod* temp = _impl_.websocket_;
  _impl_.websocket_ = nullptr;
  return temp;
}
inline ::ConnectivityMethod* PeerDescriptor::_internal_mutable_websocket() {
  
  if (_impl_.websocket_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConnectivityMethod>(GetArenaForAllocation());
    _impl_.websocket_ = p;
  }
  return _impl_.websocket_;
}
inline ::ConnectivityMethod* PeerDescriptor::mutable_websocket() {
  ::ConnectivityMethod* _msg = _internal_mutable_websocket();
  // @@protoc_insertion_point(field_mutable:PeerDescriptor.websocket)
  return _msg;
}
inline void PeerDescriptor::set_allocated_websocket(::ConnectivityMethod* websocket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.websocket_;
  }
  if (websocket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(websocket);
    if (message_arena != submessage_arena) {
      websocket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, websocket, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.websocket_ = websocket;
  // @@protoc_insertion_point(field_set_allocated:PeerDescriptor.websocket)
}

// optional bool openInternet = 6;
inline bool PeerDescriptor::_internal_has_openinternet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PeerDescriptor::has_openinternet() const {
  return _internal_has_openinternet();
}
inline void PeerDescriptor::clear_openinternet() {
  _impl_.openinternet_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PeerDescriptor::_internal_openinternet() const {
  return _impl_.openinternet_;
}
inline bool PeerDescriptor::openinternet() const {
  // @@protoc_insertion_point(field_get:PeerDescriptor.openInternet)
  return _internal_openinternet();
}
inline void PeerDescriptor::_internal_set_openinternet(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.openinternet_ = value;
}
inline void PeerDescriptor::set_openinternet(bool value) {
  _internal_set_openinternet(value);
  // @@protoc_insertion_point(field_set:PeerDescriptor.openInternet)
}

// -------------------------------------------------------------------

// ConnectivityMethod

// uint32 port = 2;
inline void ConnectivityMethod::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t ConnectivityMethod::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t ConnectivityMethod::port() const {
  // @@protoc_insertion_point(field_get:ConnectivityMethod.port)
  return _internal_port();
}
inline void ConnectivityMethod::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void ConnectivityMethod::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ConnectivityMethod.port)
}

// string ip = 3;
inline void ConnectivityMethod::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& ConnectivityMethod::ip() const {
  // @@protoc_insertion_point(field_get:ConnectivityMethod.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectivityMethod::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ConnectivityMethod.ip)
}
inline std::string* ConnectivityMethod::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:ConnectivityMethod.ip)
  return _s;
}
inline const std::string& ConnectivityMethod::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void ConnectivityMethod::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectivityMethod::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectivityMethod::release_ip() {
  // @@protoc_insertion_point(field_release:ConnectivityMethod.ip)
  return _impl_.ip_.Release();
}
inline void ConnectivityMethod::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConnectivityMethod.ip)
}

// -------------------------------------------------------------------

// OptionalRequest

// optional string someOptionalField = 1;
inline bool OptionalRequest::_internal_has_someoptionalfield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OptionalRequest::has_someoptionalfield() const {
  return _internal_has_someoptionalfield();
}
inline void OptionalRequest::clear_someoptionalfield() {
  _impl_.someoptionalfield_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OptionalRequest::someoptionalfield() const {
  // @@protoc_insertion_point(field_get:OptionalRequest.someOptionalField)
  return _internal_someoptionalfield();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionalRequest::set_someoptionalfield(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.someoptionalfield_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OptionalRequest.someOptionalField)
}
inline std::string* OptionalRequest::mutable_someoptionalfield() {
  std::string* _s = _internal_mutable_someoptionalfield();
  // @@protoc_insertion_point(field_mutable:OptionalRequest.someOptionalField)
  return _s;
}
inline const std::string& OptionalRequest::_internal_someoptionalfield() const {
  return _impl_.someoptionalfield_.Get();
}
inline void OptionalRequest::_internal_set_someoptionalfield(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.someoptionalfield_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionalRequest::_internal_mutable_someoptionalfield() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.someoptionalfield_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionalRequest::release_someoptionalfield() {
  // @@protoc_insertion_point(field_release:OptionalRequest.someOptionalField)
  if (!_internal_has_someoptionalfield()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.someoptionalfield_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.someoptionalfield_.IsDefault()) {
    _impl_.someoptionalfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OptionalRequest::set_allocated_someoptionalfield(std::string* someoptionalfield) {
  if (someoptionalfield != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.someoptionalfield_.SetAllocated(someoptionalfield, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.someoptionalfield_.IsDefault()) {
    _impl_.someoptionalfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OptionalRequest.someOptionalField)
}

// -------------------------------------------------------------------

// OptionalResponse

// optional string someOptionalField = 1;
inline bool OptionalResponse::_internal_has_someoptionalfield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OptionalResponse::has_someoptionalfield() const {
  return _internal_has_someoptionalfield();
}
inline void OptionalResponse::clear_someoptionalfield() {
  _impl_.someoptionalfield_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OptionalResponse::someoptionalfield() const {
  // @@protoc_insertion_point(field_get:OptionalResponse.someOptionalField)
  return _internal_someoptionalfield();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OptionalResponse::set_someoptionalfield(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.someoptionalfield_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:OptionalResponse.someOptionalField)
}
inline std::string* OptionalResponse::mutable_someoptionalfield() {
  std::string* _s = _internal_mutable_someoptionalfield();
  // @@protoc_insertion_point(field_mutable:OptionalResponse.someOptionalField)
  return _s;
}
inline const std::string& OptionalResponse::_internal_someoptionalfield() const {
  return _impl_.someoptionalfield_.Get();
}
inline void OptionalResponse::_internal_set_someoptionalfield(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.someoptionalfield_.Set(value, GetArenaForAllocation());
}
inline std::string* OptionalResponse::_internal_mutable_someoptionalfield() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.someoptionalfield_.Mutable(GetArenaForAllocation());
}
inline std::string* OptionalResponse::release_someoptionalfield() {
  // @@protoc_insertion_point(field_release:OptionalResponse.someOptionalField)
  if (!_internal_has_someoptionalfield()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.someoptionalfield_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.someoptionalfield_.IsDefault()) {
    _impl_.someoptionalfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void OptionalResponse::set_allocated_someoptionalfield(std::string* someoptionalfield) {
  if (someoptionalfield != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.someoptionalfield_.SetAllocated(someoptionalfield, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.someoptionalfield_.IsDefault()) {
    _impl_.someoptionalfield_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OptionalResponse.someOptionalField)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NodeType>() {
  return ::NodeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TestProtos_2eproto
