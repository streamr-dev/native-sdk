// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestProtos.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_TestProtos_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_TestProtos_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_TestProtos_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_TestProtos_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_TestProtos_2eproto;
class ClosestPeersRequest;
struct ClosestPeersRequestDefaultTypeInternal;
extern ClosestPeersRequestDefaultTypeInternal _ClosestPeersRequest_default_instance_;
class ClosestPeersResponse;
struct ClosestPeersResponseDefaultTypeInternal;
extern ClosestPeersResponseDefaultTypeInternal _ClosestPeersResponse_default_instance_;
class ConnectivityMethod;
struct ConnectivityMethodDefaultTypeInternal;
extern ConnectivityMethodDefaultTypeInternal _ConnectivityMethod_default_instance_;
class OptionalRequest;
struct OptionalRequestDefaultTypeInternal;
extern OptionalRequestDefaultTypeInternal _OptionalRequest_default_instance_;
class OptionalResponse;
struct OptionalResponseDefaultTypeInternal;
extern OptionalResponseDefaultTypeInternal _OptionalResponse_default_instance_;
class PeerDescriptor;
struct PeerDescriptorDefaultTypeInternal;
extern PeerDescriptorDefaultTypeInternal _PeerDescriptor_default_instance_;
class PingRequest;
struct PingRequestDefaultTypeInternal;
extern PingRequestDefaultTypeInternal _PingRequest_default_instance_;
class PingResponse;
struct PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class RouteMessageAck;
struct RouteMessageAckDefaultTypeInternal;
extern RouteMessageAckDefaultTypeInternal _RouteMessageAck_default_instance_;
class RouteMessageWrapper;
struct RouteMessageWrapperDefaultTypeInternal;
extern RouteMessageWrapperDefaultTypeInternal _RouteMessageWrapper_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum NodeType : int {
  NODEJS = 0,
  BROWSER = 1,
  NodeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NodeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NodeType_IsValid(int value);
extern const uint32_t NodeType_internal_data_[];
constexpr NodeType NodeType_MIN = static_cast<NodeType>(0);
constexpr NodeType NodeType_MAX = static_cast<NodeType>(1);
constexpr int NodeType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
NodeType_descriptor();
template <typename T>
const std::string& NodeType_Name(T value) {
  static_assert(std::is_same<T, NodeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NodeType_Name().");
  return NodeType_Name(static_cast<NodeType>(value));
}
template <>
inline const std::string& NodeType_Name(NodeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NodeType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool NodeType_Parse(absl::string_view name, NodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeType>(
      NodeType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PingResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PingResponse) */ {
 public:
  inline PingResponse() : PingResponse(nullptr) {}
  ~PingResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PingResponse(::google::protobuf::internal::ConstantInitialized);

  inline PingResponse(const PingResponse& from)
      : PingResponse(nullptr, from) {}
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PingResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PingResponse";
  }
  protected:
  explicit PingResponse(::google::protobuf::Arena* arena);
  PingResponse(::google::protobuf::Arena* arena, const PingResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // string requestId = 1;
  void clear_requestid() ;
  const std::string& requestid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requestid(Arg_&& arg, Args_... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* value);

  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(
      const std::string& value);
  std::string* _internal_mutable_requestid();

  public:
  // @@protoc_insertion_point(class_scope:PingResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr requestid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};// -------------------------------------------------------------------

class PingRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PingRequest) */ {
 public:
  inline PingRequest() : PingRequest(nullptr) {}
  ~PingRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PingRequest(::google::protobuf::internal::ConstantInitialized);

  inline PingRequest(const PingRequest& from)
      : PingRequest(nullptr, from) {}
  PingRequest(PingRequest&& from) noexcept
    : PingRequest() {
    *this = ::std::move(from);
  }

  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingRequest& operator=(PingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PingRequest* internal_default_instance() {
    return reinterpret_cast<const PingRequest*>(
               &_PingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PingRequest& a, PingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PingRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PingRequest>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PingRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PingRequest";
  }
  protected:
  explicit PingRequest(::google::protobuf::Arena* arena);
  PingRequest(::google::protobuf::Arena* arena, const PingRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // string requestId = 1;
  void clear_requestid() ;
  const std::string& requestid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requestid(Arg_&& arg, Args_... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* value);

  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(
      const std::string& value);
  std::string* _internal_mutable_requestid();

  public:
  // @@protoc_insertion_point(class_scope:PingRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr requestid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};// -------------------------------------------------------------------

class OptionalResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OptionalResponse) */ {
 public:
  inline OptionalResponse() : OptionalResponse(nullptr) {}
  ~OptionalResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OptionalResponse(::google::protobuf::internal::ConstantInitialized);

  inline OptionalResponse(const OptionalResponse& from)
      : OptionalResponse(nullptr, from) {}
  OptionalResponse(OptionalResponse&& from) noexcept
    : OptionalResponse() {
    *this = ::std::move(from);
  }

  inline OptionalResponse& operator=(const OptionalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalResponse& operator=(OptionalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionalResponse* internal_default_instance() {
    return reinterpret_cast<const OptionalResponse*>(
               &_OptionalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OptionalResponse& a, OptionalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionalResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionalResponse>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptionalResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "OptionalResponse";
  }
  protected:
  explicit OptionalResponse(::google::protobuf::Arena* arena);
  OptionalResponse(::google::protobuf::Arena* arena, const OptionalResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeOptionalFieldFieldNumber = 1,
  };
  // optional string someOptionalField = 1;
  bool has_someoptionalfield() const;
  void clear_someoptionalfield() ;
  const std::string& someoptionalfield() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_someoptionalfield(Arg_&& arg, Args_... args);
  std::string* mutable_someoptionalfield();
  PROTOBUF_NODISCARD std::string* release_someoptionalfield();
  void set_allocated_someoptionalfield(std::string* value);

  private:
  const std::string& _internal_someoptionalfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_someoptionalfield(
      const std::string& value);
  std::string* _internal_mutable_someoptionalfield();

  public:
  // @@protoc_insertion_point(class_scope:OptionalResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr someoptionalfield_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};// -------------------------------------------------------------------

class OptionalRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OptionalRequest) */ {
 public:
  inline OptionalRequest() : OptionalRequest(nullptr) {}
  ~OptionalRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OptionalRequest(::google::protobuf::internal::ConstantInitialized);

  inline OptionalRequest(const OptionalRequest& from)
      : OptionalRequest(nullptr, from) {}
  OptionalRequest(OptionalRequest&& from) noexcept
    : OptionalRequest() {
    *this = ::std::move(from);
  }

  inline OptionalRequest& operator=(const OptionalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalRequest& operator=(OptionalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionalRequest* internal_default_instance() {
    return reinterpret_cast<const OptionalRequest*>(
               &_OptionalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OptionalRequest& a, OptionalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionalRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionalRequest>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OptionalRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "OptionalRequest";
  }
  protected:
  explicit OptionalRequest(::google::protobuf::Arena* arena);
  OptionalRequest(::google::protobuf::Arena* arena, const OptionalRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSomeOptionalFieldFieldNumber = 1,
  };
  // optional string someOptionalField = 1;
  bool has_someoptionalfield() const;
  void clear_someoptionalfield() ;
  const std::string& someoptionalfield() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_someoptionalfield(Arg_&& arg, Args_... args);
  std::string* mutable_someoptionalfield();
  PROTOBUF_NODISCARD std::string* release_someoptionalfield();
  void set_allocated_someoptionalfield(std::string* value);

  private:
  const std::string& _internal_someoptionalfield() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_someoptionalfield(
      const std::string& value);
  std::string* _internal_mutable_someoptionalfield();

  public:
  // @@protoc_insertion_point(class_scope:OptionalRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr someoptionalfield_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};// -------------------------------------------------------------------

class ConnectivityMethod final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConnectivityMethod) */ {
 public:
  inline ConnectivityMethod() : ConnectivityMethod(nullptr) {}
  ~ConnectivityMethod() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectivityMethod(::google::protobuf::internal::ConstantInitialized);

  inline ConnectivityMethod(const ConnectivityMethod& from)
      : ConnectivityMethod(nullptr, from) {}
  ConnectivityMethod(ConnectivityMethod&& from) noexcept
    : ConnectivityMethod() {
    *this = ::std::move(from);
  }

  inline ConnectivityMethod& operator=(const ConnectivityMethod& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectivityMethod& operator=(ConnectivityMethod&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectivityMethod& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectivityMethod* internal_default_instance() {
    return reinterpret_cast<const ConnectivityMethod*>(
               &_ConnectivityMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConnectivityMethod& a, ConnectivityMethod& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectivityMethod* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectivityMethod* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectivityMethod* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectivityMethod>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConnectivityMethod* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ConnectivityMethod";
  }
  protected:
  explicit ConnectivityMethod(::google::protobuf::Arena* arena);
  ConnectivityMethod(::google::protobuf::Arena* arena, const ConnectivityMethod& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 3,
    kPortFieldNumber = 2,
  };
  // string ip = 3;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // uint32 port = 2;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ConnectivityMethod)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::uint32_t port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};// -------------------------------------------------------------------

class PeerDescriptor final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PeerDescriptor) */ {
 public:
  inline PeerDescriptor() : PeerDescriptor(nullptr) {}
  ~PeerDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PeerDescriptor(::google::protobuf::internal::ConstantInitialized);

  inline PeerDescriptor(const PeerDescriptor& from)
      : PeerDescriptor(nullptr, from) {}
  PeerDescriptor(PeerDescriptor&& from) noexcept
    : PeerDescriptor() {
    *this = ::std::move(from);
  }

  inline PeerDescriptor& operator=(const PeerDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerDescriptor& operator=(PeerDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerDescriptor* internal_default_instance() {
    return reinterpret_cast<const PeerDescriptor*>(
               &_PeerDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PeerDescriptor& a, PeerDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerDescriptor* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerDescriptor>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PeerDescriptor* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "PeerDescriptor";
  }
  protected:
  explicit PeerDescriptor(::google::protobuf::Arena* arena);
  PeerDescriptor(::google::protobuf::Arena* arena, const PeerDescriptor& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kUdpFieldNumber = 3,
    kTcpFieldNumber = 4,
    kWebsocketFieldNumber = 5,
    kTypeFieldNumber = 2,
    kOpenInternetFieldNumber = 6,
  };
  // bytes nodeId = 1;
  void clear_nodeid() ;
  const std::string& nodeid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nodeid(Arg_&& arg, Args_... args);
  std::string* mutable_nodeid();
  PROTOBUF_NODISCARD std::string* release_nodeid();
  void set_allocated_nodeid(std::string* value);

  private:
  const std::string& _internal_nodeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nodeid(
      const std::string& value);
  std::string* _internal_mutable_nodeid();

  public:
  // .ConnectivityMethod udp = 3;
  bool has_udp() const;
  void clear_udp() ;
  const ::ConnectivityMethod& udp() const;
  PROTOBUF_NODISCARD ::ConnectivityMethod* release_udp();
  ::ConnectivityMethod* mutable_udp();
  void set_allocated_udp(::ConnectivityMethod* value);
  void unsafe_arena_set_allocated_udp(::ConnectivityMethod* value);
  ::ConnectivityMethod* unsafe_arena_release_udp();

  private:
  const ::ConnectivityMethod& _internal_udp() const;
  ::ConnectivityMethod* _internal_mutable_udp();

  public:
  // .ConnectivityMethod tcp = 4;
  bool has_tcp() const;
  void clear_tcp() ;
  const ::ConnectivityMethod& tcp() const;
  PROTOBUF_NODISCARD ::ConnectivityMethod* release_tcp();
  ::ConnectivityMethod* mutable_tcp();
  void set_allocated_tcp(::ConnectivityMethod* value);
  void unsafe_arena_set_allocated_tcp(::ConnectivityMethod* value);
  ::ConnectivityMethod* unsafe_arena_release_tcp();

  private:
  const ::ConnectivityMethod& _internal_tcp() const;
  ::ConnectivityMethod* _internal_mutable_tcp();

  public:
  // .ConnectivityMethod websocket = 5;
  bool has_websocket() const;
  void clear_websocket() ;
  const ::ConnectivityMethod& websocket() const;
  PROTOBUF_NODISCARD ::ConnectivityMethod* release_websocket();
  ::ConnectivityMethod* mutable_websocket();
  void set_allocated_websocket(::ConnectivityMethod* value);
  void unsafe_arena_set_allocated_websocket(::ConnectivityMethod* value);
  ::ConnectivityMethod* unsafe_arena_release_websocket();

  private:
  const ::ConnectivityMethod& _internal_websocket() const;
  ::ConnectivityMethod* _internal_mutable_websocket();

  public:
  // .NodeType type = 2;
  void clear_type() ;
  ::NodeType type() const;
  void set_type(::NodeType value);

  private:
  ::NodeType _internal_type() const;
  void _internal_set_type(::NodeType value);

  public:
  // optional bool openInternet = 6;
  bool has_openinternet() const;
  void clear_openinternet() ;
  bool openinternet() const;
  void set_openinternet(bool value);

  private:
  bool _internal_openinternet() const;
  void _internal_set_openinternet(bool value);

  public:
  // @@protoc_insertion_point(class_scope:PeerDescriptor)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr nodeid_;
    ::ConnectivityMethod* udp_;
    ::ConnectivityMethod* tcp_;
    ::ConnectivityMethod* websocket_;
    int type_;
    bool openinternet_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};// -------------------------------------------------------------------

class RouteMessageWrapper final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RouteMessageWrapper) */ {
 public:
  inline RouteMessageWrapper() : RouteMessageWrapper(nullptr) {}
  ~RouteMessageWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RouteMessageWrapper(::google::protobuf::internal::ConstantInitialized);

  inline RouteMessageWrapper(const RouteMessageWrapper& from)
      : RouteMessageWrapper(nullptr, from) {}
  RouteMessageWrapper(RouteMessageWrapper&& from) noexcept
    : RouteMessageWrapper() {
    *this = ::std::move(from);
  }

  inline RouteMessageWrapper& operator=(const RouteMessageWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteMessageWrapper& operator=(RouteMessageWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteMessageWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteMessageWrapper* internal_default_instance() {
    return reinterpret_cast<const RouteMessageWrapper*>(
               &_RouteMessageWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RouteMessageWrapper& a, RouteMessageWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteMessageWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteMessageWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteMessageWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteMessageWrapper>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RouteMessageWrapper* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RouteMessageWrapper";
  }
  protected:
  explicit RouteMessageWrapper(::google::protobuf::Arena* arena);
  RouteMessageWrapper(::google::protobuf::Arena* arena, const RouteMessageWrapper& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 2,
    kMessageFieldNumber = 5,
    kSourcePeerFieldNumber = 1,
    kDestinationPeerFieldNumber = 3,
    kPreviousPeerFieldNumber = 4,
  };
  // string requestId = 2;
  void clear_requestid() ;
  const std::string& requestid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requestid(Arg_&& arg, Args_... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* value);

  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(
      const std::string& value);
  std::string* _internal_mutable_requestid();

  public:
  // bytes message = 5;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .PeerDescriptor sourcePeer = 1;
  bool has_sourcepeer() const;
  void clear_sourcepeer() ;
  const ::PeerDescriptor& sourcepeer() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_sourcepeer();
  ::PeerDescriptor* mutable_sourcepeer();
  void set_allocated_sourcepeer(::PeerDescriptor* value);
  void unsafe_arena_set_allocated_sourcepeer(::PeerDescriptor* value);
  ::PeerDescriptor* unsafe_arena_release_sourcepeer();

  private:
  const ::PeerDescriptor& _internal_sourcepeer() const;
  ::PeerDescriptor* _internal_mutable_sourcepeer();

  public:
  // .PeerDescriptor destinationPeer = 3;
  bool has_destinationpeer() const;
  void clear_destinationpeer() ;
  const ::PeerDescriptor& destinationpeer() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_destinationpeer();
  ::PeerDescriptor* mutable_destinationpeer();
  void set_allocated_destinationpeer(::PeerDescriptor* value);
  void unsafe_arena_set_allocated_destinationpeer(::PeerDescriptor* value);
  ::PeerDescriptor* unsafe_arena_release_destinationpeer();

  private:
  const ::PeerDescriptor& _internal_destinationpeer() const;
  ::PeerDescriptor* _internal_mutable_destinationpeer();

  public:
  // .PeerDescriptor previousPeer = 4;
  bool has_previouspeer() const;
  void clear_previouspeer() ;
  const ::PeerDescriptor& previouspeer() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_previouspeer();
  ::PeerDescriptor* mutable_previouspeer();
  void set_allocated_previouspeer(::PeerDescriptor* value);
  void unsafe_arena_set_allocated_previouspeer(::PeerDescriptor* value);
  ::PeerDescriptor* unsafe_arena_release_previouspeer();

  private:
  const ::PeerDescriptor& _internal_previouspeer() const;
  ::PeerDescriptor* _internal_mutable_previouspeer();

  public:
  // @@protoc_insertion_point(class_scope:RouteMessageWrapper)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr requestid_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::PeerDescriptor* sourcepeer_;
    ::PeerDescriptor* destinationpeer_;
    ::PeerDescriptor* previouspeer_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};// -------------------------------------------------------------------

class RouteMessageAck final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RouteMessageAck) */ {
 public:
  inline RouteMessageAck() : RouteMessageAck(nullptr) {}
  ~RouteMessageAck() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RouteMessageAck(::google::protobuf::internal::ConstantInitialized);

  inline RouteMessageAck(const RouteMessageAck& from)
      : RouteMessageAck(nullptr, from) {}
  RouteMessageAck(RouteMessageAck&& from) noexcept
    : RouteMessageAck() {
    *this = ::std::move(from);
  }

  inline RouteMessageAck& operator=(const RouteMessageAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteMessageAck& operator=(RouteMessageAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteMessageAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteMessageAck* internal_default_instance() {
    return reinterpret_cast<const RouteMessageAck*>(
               &_RouteMessageAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RouteMessageAck& a, RouteMessageAck& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteMessageAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteMessageAck* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteMessageAck* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteMessageAck>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RouteMessageAck* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "RouteMessageAck";
  }
  protected:
  explicit RouteMessageAck(::google::protobuf::Arena* arena);
  RouteMessageAck(::google::protobuf::Arena* arena, const RouteMessageAck& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 2,
    kErrorFieldNumber = 4,
    kSourcePeerFieldNumber = 1,
    kDestinationPeerFieldNumber = 3,
  };
  // string requestId = 2;
  void clear_requestid() ;
  const std::string& requestid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requestid(Arg_&& arg, Args_... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* value);

  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(
      const std::string& value);
  std::string* _internal_mutable_requestid();

  public:
  // string error = 4;
  void clear_error() ;
  const std::string& error() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* value);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // .PeerDescriptor sourcePeer = 1;
  bool has_sourcepeer() const;
  void clear_sourcepeer() ;
  const ::PeerDescriptor& sourcepeer() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_sourcepeer();
  ::PeerDescriptor* mutable_sourcepeer();
  void set_allocated_sourcepeer(::PeerDescriptor* value);
  void unsafe_arena_set_allocated_sourcepeer(::PeerDescriptor* value);
  ::PeerDescriptor* unsafe_arena_release_sourcepeer();

  private:
  const ::PeerDescriptor& _internal_sourcepeer() const;
  ::PeerDescriptor* _internal_mutable_sourcepeer();

  public:
  // .PeerDescriptor destinationPeer = 3;
  bool has_destinationpeer() const;
  void clear_destinationpeer() ;
  const ::PeerDescriptor& destinationpeer() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_destinationpeer();
  ::PeerDescriptor* mutable_destinationpeer();
  void set_allocated_destinationpeer(::PeerDescriptor* value);
  void unsafe_arena_set_allocated_destinationpeer(::PeerDescriptor* value);
  ::PeerDescriptor* unsafe_arena_release_destinationpeer();

  private:
  const ::PeerDescriptor& _internal_destinationpeer() const;
  ::PeerDescriptor* _internal_mutable_destinationpeer();

  public:
  // @@protoc_insertion_point(class_scope:RouteMessageAck)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr requestid_;
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::PeerDescriptor* sourcepeer_;
    ::PeerDescriptor* destinationpeer_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};// -------------------------------------------------------------------

class ClosestPeersResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClosestPeersResponse) */ {
 public:
  inline ClosestPeersResponse() : ClosestPeersResponse(nullptr) {}
  ~ClosestPeersResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClosestPeersResponse(::google::protobuf::internal::ConstantInitialized);

  inline ClosestPeersResponse(const ClosestPeersResponse& from)
      : ClosestPeersResponse(nullptr, from) {}
  ClosestPeersResponse(ClosestPeersResponse&& from) noexcept
    : ClosestPeersResponse() {
    *this = ::std::move(from);
  }

  inline ClosestPeersResponse& operator=(const ClosestPeersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClosestPeersResponse& operator=(ClosestPeersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClosestPeersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClosestPeersResponse* internal_default_instance() {
    return reinterpret_cast<const ClosestPeersResponse*>(
               &_ClosestPeersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClosestPeersResponse& a, ClosestPeersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClosestPeersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClosestPeersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClosestPeersResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClosestPeersResponse>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClosestPeersResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClosestPeersResponse";
  }
  protected:
  explicit ClosestPeersResponse(::google::protobuf::Arena* arena);
  ClosestPeersResponse(::google::protobuf::Arena* arena, const ClosestPeersResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 1,
    kRequestIdFieldNumber = 2,
  };
  // repeated .PeerDescriptor peers = 1;
  int peers_size() const;
  private:
  int _internal_peers_size() const;

  public:
  void clear_peers() ;
  ::PeerDescriptor* mutable_peers(int index);
  ::google::protobuf::RepeatedPtrField< ::PeerDescriptor >*
      mutable_peers();
  private:
  const ::google::protobuf::RepeatedPtrField<::PeerDescriptor>& _internal_peers() const;
  ::google::protobuf::RepeatedPtrField<::PeerDescriptor>* _internal_mutable_peers();
  public:
  const ::PeerDescriptor& peers(int index) const;
  ::PeerDescriptor* add_peers();
  const ::google::protobuf::RepeatedPtrField< ::PeerDescriptor >&
      peers() const;
  // string requestId = 2;
  void clear_requestid() ;
  const std::string& requestid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requestid(Arg_&& arg, Args_... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* value);

  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(
      const std::string& value);
  std::string* _internal_mutable_requestid();

  public:
  // @@protoc_insertion_point(class_scope:ClosestPeersResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::PeerDescriptor > peers_;
    ::google::protobuf::internal::ArenaStringPtr requestid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};// -------------------------------------------------------------------

class ClosestPeersRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClosestPeersRequest) */ {
 public:
  inline ClosestPeersRequest() : ClosestPeersRequest(nullptr) {}
  ~ClosestPeersRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClosestPeersRequest(::google::protobuf::internal::ConstantInitialized);

  inline ClosestPeersRequest(const ClosestPeersRequest& from)
      : ClosestPeersRequest(nullptr, from) {}
  ClosestPeersRequest(ClosestPeersRequest&& from) noexcept
    : ClosestPeersRequest() {
    *this = ::std::move(from);
  }

  inline ClosestPeersRequest& operator=(const ClosestPeersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClosestPeersRequest& operator=(ClosestPeersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClosestPeersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClosestPeersRequest* internal_default_instance() {
    return reinterpret_cast<const ClosestPeersRequest*>(
               &_ClosestPeersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClosestPeersRequest& a, ClosestPeersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClosestPeersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClosestPeersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClosestPeersRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClosestPeersRequest>(arena);
  }
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClosestPeersRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClosestPeersRequest";
  }
  protected:
  explicit ClosestPeersRequest(::google::protobuf::Arena* arena);
  ClosestPeersRequest(::google::protobuf::Arena* arena, const ClosestPeersRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 2,
    kPeerDescriptorFieldNumber = 1,
  };
  // string requestId = 2;
  void clear_requestid() ;
  const std::string& requestid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requestid(Arg_&& arg, Args_... args);
  std::string* mutable_requestid();
  PROTOBUF_NODISCARD std::string* release_requestid();
  void set_allocated_requestid(std::string* value);

  private:
  const std::string& _internal_requestid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestid(
      const std::string& value);
  std::string* _internal_mutable_requestid();

  public:
  // .PeerDescriptor peerDescriptor = 1;
  bool has_peerdescriptor() const;
  void clear_peerdescriptor() ;
  const ::PeerDescriptor& peerdescriptor() const;
  PROTOBUF_NODISCARD ::PeerDescriptor* release_peerdescriptor();
  ::PeerDescriptor* mutable_peerdescriptor();
  void set_allocated_peerdescriptor(::PeerDescriptor* value);
  void unsafe_arena_set_allocated_peerdescriptor(::PeerDescriptor* value);
  ::PeerDescriptor* unsafe_arena_release_peerdescriptor();

  private:
  const ::PeerDescriptor& _internal_peerdescriptor() const;
  ::PeerDescriptor* _internal_mutable_peerdescriptor();

  public:
  // @@protoc_insertion_point(class_scope:ClosestPeersRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr requestid_;
    ::PeerDescriptor* peerdescriptor_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TestProtos_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RouteMessageWrapper

// .PeerDescriptor sourcePeer = 1;
inline bool RouteMessageWrapper::has_sourcepeer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sourcepeer_ != nullptr);
  return value;
}
inline void RouteMessageWrapper::clear_sourcepeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sourcepeer_ != nullptr) _impl_.sourcepeer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::PeerDescriptor& RouteMessageWrapper::_internal_sourcepeer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::PeerDescriptor* p = _impl_.sourcepeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& RouteMessageWrapper::sourcepeer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RouteMessageWrapper.sourcePeer)
  return _internal_sourcepeer();
}
inline void RouteMessageWrapper::unsafe_arena_set_allocated_sourcepeer(::PeerDescriptor* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sourcepeer_);
  }
  _impl_.sourcepeer_ = reinterpret_cast<::PeerDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RouteMessageWrapper.sourcePeer)
}
inline ::PeerDescriptor* RouteMessageWrapper::release_sourcepeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PeerDescriptor* released = _impl_.sourcepeer_;
  _impl_.sourcepeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PeerDescriptor* RouteMessageWrapper::unsafe_arena_release_sourcepeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RouteMessageWrapper.sourcePeer)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PeerDescriptor* temp = _impl_.sourcepeer_;
  _impl_.sourcepeer_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* RouteMessageWrapper::_internal_mutable_sourcepeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sourcepeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArena());
    _impl_.sourcepeer_ = reinterpret_cast<::PeerDescriptor*>(p);
  }
  return _impl_.sourcepeer_;
}
inline ::PeerDescriptor* RouteMessageWrapper::mutable_sourcepeer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PeerDescriptor* _msg = _internal_mutable_sourcepeer();
  // @@protoc_insertion_point(field_mutable:RouteMessageWrapper.sourcePeer)
  return _msg;
}
inline void RouteMessageWrapper::set_allocated_sourcepeer(::PeerDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::PeerDescriptor*>(_impl_.sourcepeer_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::PeerDescriptor*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.sourcepeer_ = reinterpret_cast<::PeerDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:RouteMessageWrapper.sourcePeer)
}

// string requestId = 2;
inline void RouteMessageWrapper::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& RouteMessageWrapper::requestid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RouteMessageWrapper.requestId)
  return _internal_requestid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RouteMessageWrapper::set_requestid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RouteMessageWrapper.requestId)
}
inline std::string* RouteMessageWrapper::mutable_requestid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:RouteMessageWrapper.requestId)
  return _s;
}
inline const std::string& RouteMessageWrapper::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_.Get();
}
inline void RouteMessageWrapper::_internal_set_requestid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(value, GetArena());
}
inline std::string* RouteMessageWrapper::_internal_mutable_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.requestid_.Mutable( GetArena());
}
inline std::string* RouteMessageWrapper::release_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RouteMessageWrapper.requestId)
  return _impl_.requestid_.Release();
}
inline void RouteMessageWrapper::set_allocated_requestid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.requestid_.IsDefault()) {
          _impl_.requestid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RouteMessageWrapper.requestId)
}

// .PeerDescriptor destinationPeer = 3;
inline bool RouteMessageWrapper::has_destinationpeer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.destinationpeer_ != nullptr);
  return value;
}
inline void RouteMessageWrapper::clear_destinationpeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.destinationpeer_ != nullptr) _impl_.destinationpeer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PeerDescriptor& RouteMessageWrapper::_internal_destinationpeer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::PeerDescriptor* p = _impl_.destinationpeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& RouteMessageWrapper::destinationpeer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RouteMessageWrapper.destinationPeer)
  return _internal_destinationpeer();
}
inline void RouteMessageWrapper::unsafe_arena_set_allocated_destinationpeer(::PeerDescriptor* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.destinationpeer_);
  }
  _impl_.destinationpeer_ = reinterpret_cast<::PeerDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RouteMessageWrapper.destinationPeer)
}
inline ::PeerDescriptor* RouteMessageWrapper::release_destinationpeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PeerDescriptor* released = _impl_.destinationpeer_;
  _impl_.destinationpeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PeerDescriptor* RouteMessageWrapper::unsafe_arena_release_destinationpeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RouteMessageWrapper.destinationPeer)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PeerDescriptor* temp = _impl_.destinationpeer_;
  _impl_.destinationpeer_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* RouteMessageWrapper::_internal_mutable_destinationpeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.destinationpeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArena());
    _impl_.destinationpeer_ = reinterpret_cast<::PeerDescriptor*>(p);
  }
  return _impl_.destinationpeer_;
}
inline ::PeerDescriptor* RouteMessageWrapper::mutable_destinationpeer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PeerDescriptor* _msg = _internal_mutable_destinationpeer();
  // @@protoc_insertion_point(field_mutable:RouteMessageWrapper.destinationPeer)
  return _msg;
}
inline void RouteMessageWrapper::set_allocated_destinationpeer(::PeerDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::PeerDescriptor*>(_impl_.destinationpeer_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::PeerDescriptor*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.destinationpeer_ = reinterpret_cast<::PeerDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:RouteMessageWrapper.destinationPeer)
}

// .PeerDescriptor previousPeer = 4;
inline bool RouteMessageWrapper::has_previouspeer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.previouspeer_ != nullptr);
  return value;
}
inline void RouteMessageWrapper::clear_previouspeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.previouspeer_ != nullptr) _impl_.previouspeer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::PeerDescriptor& RouteMessageWrapper::_internal_previouspeer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::PeerDescriptor* p = _impl_.previouspeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& RouteMessageWrapper::previouspeer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RouteMessageWrapper.previousPeer)
  return _internal_previouspeer();
}
inline void RouteMessageWrapper::unsafe_arena_set_allocated_previouspeer(::PeerDescriptor* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.previouspeer_);
  }
  _impl_.previouspeer_ = reinterpret_cast<::PeerDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RouteMessageWrapper.previousPeer)
}
inline ::PeerDescriptor* RouteMessageWrapper::release_previouspeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PeerDescriptor* released = _impl_.previouspeer_;
  _impl_.previouspeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PeerDescriptor* RouteMessageWrapper::unsafe_arena_release_previouspeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RouteMessageWrapper.previousPeer)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PeerDescriptor* temp = _impl_.previouspeer_;
  _impl_.previouspeer_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* RouteMessageWrapper::_internal_mutable_previouspeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.previouspeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArena());
    _impl_.previouspeer_ = reinterpret_cast<::PeerDescriptor*>(p);
  }
  return _impl_.previouspeer_;
}
inline ::PeerDescriptor* RouteMessageWrapper::mutable_previouspeer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PeerDescriptor* _msg = _internal_mutable_previouspeer();
  // @@protoc_insertion_point(field_mutable:RouteMessageWrapper.previousPeer)
  return _msg;
}
inline void RouteMessageWrapper::set_allocated_previouspeer(::PeerDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::PeerDescriptor*>(_impl_.previouspeer_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::PeerDescriptor*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.previouspeer_ = reinterpret_cast<::PeerDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:RouteMessageWrapper.previousPeer)
}

// bytes message = 5;
inline void RouteMessageWrapper::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RouteMessageWrapper::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RouteMessageWrapper.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RouteMessageWrapper::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RouteMessageWrapper.message)
}
inline std::string* RouteMessageWrapper::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:RouteMessageWrapper.message)
  return _s;
}
inline const std::string& RouteMessageWrapper::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void RouteMessageWrapper::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* RouteMessageWrapper::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* RouteMessageWrapper::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RouteMessageWrapper.message)
  return _impl_.message_.Release();
}
inline void RouteMessageWrapper::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RouteMessageWrapper.message)
}

// -------------------------------------------------------------------

// RouteMessageAck

// .PeerDescriptor sourcePeer = 1;
inline bool RouteMessageAck::has_sourcepeer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sourcepeer_ != nullptr);
  return value;
}
inline void RouteMessageAck::clear_sourcepeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.sourcepeer_ != nullptr) _impl_.sourcepeer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::PeerDescriptor& RouteMessageAck::_internal_sourcepeer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::PeerDescriptor* p = _impl_.sourcepeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& RouteMessageAck::sourcepeer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RouteMessageAck.sourcePeer)
  return _internal_sourcepeer();
}
inline void RouteMessageAck::unsafe_arena_set_allocated_sourcepeer(::PeerDescriptor* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sourcepeer_);
  }
  _impl_.sourcepeer_ = reinterpret_cast<::PeerDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RouteMessageAck.sourcePeer)
}
inline ::PeerDescriptor* RouteMessageAck::release_sourcepeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PeerDescriptor* released = _impl_.sourcepeer_;
  _impl_.sourcepeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PeerDescriptor* RouteMessageAck::unsafe_arena_release_sourcepeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RouteMessageAck.sourcePeer)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PeerDescriptor* temp = _impl_.sourcepeer_;
  _impl_.sourcepeer_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* RouteMessageAck::_internal_mutable_sourcepeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sourcepeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArena());
    _impl_.sourcepeer_ = reinterpret_cast<::PeerDescriptor*>(p);
  }
  return _impl_.sourcepeer_;
}
inline ::PeerDescriptor* RouteMessageAck::mutable_sourcepeer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PeerDescriptor* _msg = _internal_mutable_sourcepeer();
  // @@protoc_insertion_point(field_mutable:RouteMessageAck.sourcePeer)
  return _msg;
}
inline void RouteMessageAck::set_allocated_sourcepeer(::PeerDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::PeerDescriptor*>(_impl_.sourcepeer_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::PeerDescriptor*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.sourcepeer_ = reinterpret_cast<::PeerDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:RouteMessageAck.sourcePeer)
}

// string requestId = 2;
inline void RouteMessageAck::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& RouteMessageAck::requestid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RouteMessageAck.requestId)
  return _internal_requestid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RouteMessageAck::set_requestid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RouteMessageAck.requestId)
}
inline std::string* RouteMessageAck::mutable_requestid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:RouteMessageAck.requestId)
  return _s;
}
inline const std::string& RouteMessageAck::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_.Get();
}
inline void RouteMessageAck::_internal_set_requestid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(value, GetArena());
}
inline std::string* RouteMessageAck::_internal_mutable_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.requestid_.Mutable( GetArena());
}
inline std::string* RouteMessageAck::release_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RouteMessageAck.requestId)
  return _impl_.requestid_.Release();
}
inline void RouteMessageAck::set_allocated_requestid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.requestid_.IsDefault()) {
          _impl_.requestid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RouteMessageAck.requestId)
}

// .PeerDescriptor destinationPeer = 3;
inline bool RouteMessageAck::has_destinationpeer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.destinationpeer_ != nullptr);
  return value;
}
inline void RouteMessageAck::clear_destinationpeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.destinationpeer_ != nullptr) _impl_.destinationpeer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::PeerDescriptor& RouteMessageAck::_internal_destinationpeer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::PeerDescriptor* p = _impl_.destinationpeer_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& RouteMessageAck::destinationpeer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RouteMessageAck.destinationPeer)
  return _internal_destinationpeer();
}
inline void RouteMessageAck::unsafe_arena_set_allocated_destinationpeer(::PeerDescriptor* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.destinationpeer_);
  }
  _impl_.destinationpeer_ = reinterpret_cast<::PeerDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RouteMessageAck.destinationPeer)
}
inline ::PeerDescriptor* RouteMessageAck::release_destinationpeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PeerDescriptor* released = _impl_.destinationpeer_;
  _impl_.destinationpeer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PeerDescriptor* RouteMessageAck::unsafe_arena_release_destinationpeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RouteMessageAck.destinationPeer)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PeerDescriptor* temp = _impl_.destinationpeer_;
  _impl_.destinationpeer_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* RouteMessageAck::_internal_mutable_destinationpeer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.destinationpeer_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArena());
    _impl_.destinationpeer_ = reinterpret_cast<::PeerDescriptor*>(p);
  }
  return _impl_.destinationpeer_;
}
inline ::PeerDescriptor* RouteMessageAck::mutable_destinationpeer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PeerDescriptor* _msg = _internal_mutable_destinationpeer();
  // @@protoc_insertion_point(field_mutable:RouteMessageAck.destinationPeer)
  return _msg;
}
inline void RouteMessageAck::set_allocated_destinationpeer(::PeerDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::PeerDescriptor*>(_impl_.destinationpeer_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::PeerDescriptor*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.destinationpeer_ = reinterpret_cast<::PeerDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:RouteMessageAck.destinationPeer)
}

// string error = 4;
inline void RouteMessageAck::clear_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.ClearToEmpty();
}
inline const std::string& RouteMessageAck::error() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RouteMessageAck.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RouteMessageAck::set_error(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RouteMessageAck.error)
}
inline std::string* RouteMessageAck::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:RouteMessageAck.error)
  return _s;
}
inline const std::string& RouteMessageAck::_internal_error() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_.Get();
}
inline void RouteMessageAck::_internal_set_error(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_.Set(value, GetArena());
}
inline std::string* RouteMessageAck::_internal_mutable_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_.Mutable( GetArena());
}
inline std::string* RouteMessageAck::release_error() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RouteMessageAck.error)
  return _impl_.error_.Release();
}
inline void RouteMessageAck::set_allocated_error(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RouteMessageAck.error)
}

// -------------------------------------------------------------------

// PingRequest

// string requestId = 1;
inline void PingRequest::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& PingRequest::requestid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PingRequest.requestId)
  return _internal_requestid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PingRequest::set_requestid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PingRequest.requestId)
}
inline std::string* PingRequest::mutable_requestid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:PingRequest.requestId)
  return _s;
}
inline const std::string& PingRequest::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_.Get();
}
inline void PingRequest::_internal_set_requestid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(value, GetArena());
}
inline std::string* PingRequest::_internal_mutable_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.requestid_.Mutable( GetArena());
}
inline std::string* PingRequest::release_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PingRequest.requestId)
  return _impl_.requestid_.Release();
}
inline void PingRequest::set_allocated_requestid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.requestid_.IsDefault()) {
          _impl_.requestid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PingRequest.requestId)
}

// -------------------------------------------------------------------

// PingResponse

// string requestId = 1;
inline void PingResponse::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& PingResponse::requestid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PingResponse.requestId)
  return _internal_requestid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PingResponse::set_requestid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PingResponse.requestId)
}
inline std::string* PingResponse::mutable_requestid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:PingResponse.requestId)
  return _s;
}
inline const std::string& PingResponse::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_.Get();
}
inline void PingResponse::_internal_set_requestid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(value, GetArena());
}
inline std::string* PingResponse::_internal_mutable_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.requestid_.Mutable( GetArena());
}
inline std::string* PingResponse::release_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PingResponse.requestId)
  return _impl_.requestid_.Release();
}
inline void PingResponse::set_allocated_requestid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.requestid_.IsDefault()) {
          _impl_.requestid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PingResponse.requestId)
}

// -------------------------------------------------------------------

// ClosestPeersRequest

// .PeerDescriptor peerDescriptor = 1;
inline bool ClosestPeersRequest::has_peerdescriptor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.peerdescriptor_ != nullptr);
  return value;
}
inline void ClosestPeersRequest::clear_peerdescriptor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.peerdescriptor_ != nullptr) _impl_.peerdescriptor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::PeerDescriptor& ClosestPeersRequest::_internal_peerdescriptor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::PeerDescriptor* p = _impl_.peerdescriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::PeerDescriptor&>(::_PeerDescriptor_default_instance_);
}
inline const ::PeerDescriptor& ClosestPeersRequest::peerdescriptor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClosestPeersRequest.peerDescriptor)
  return _internal_peerdescriptor();
}
inline void ClosestPeersRequest::unsafe_arena_set_allocated_peerdescriptor(::PeerDescriptor* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.peerdescriptor_);
  }
  _impl_.peerdescriptor_ = reinterpret_cast<::PeerDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClosestPeersRequest.peerDescriptor)
}
inline ::PeerDescriptor* ClosestPeersRequest::release_peerdescriptor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PeerDescriptor* released = _impl_.peerdescriptor_;
  _impl_.peerdescriptor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::PeerDescriptor* ClosestPeersRequest::unsafe_arena_release_peerdescriptor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ClosestPeersRequest.peerDescriptor)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PeerDescriptor* temp = _impl_.peerdescriptor_;
  _impl_.peerdescriptor_ = nullptr;
  return temp;
}
inline ::PeerDescriptor* ClosestPeersRequest::_internal_mutable_peerdescriptor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.peerdescriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::PeerDescriptor>(GetArena());
    _impl_.peerdescriptor_ = reinterpret_cast<::PeerDescriptor*>(p);
  }
  return _impl_.peerdescriptor_;
}
inline ::PeerDescriptor* ClosestPeersRequest::mutable_peerdescriptor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PeerDescriptor* _msg = _internal_mutable_peerdescriptor();
  // @@protoc_insertion_point(field_mutable:ClosestPeersRequest.peerDescriptor)
  return _msg;
}
inline void ClosestPeersRequest::set_allocated_peerdescriptor(::PeerDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::PeerDescriptor*>(_impl_.peerdescriptor_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::PeerDescriptor*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.peerdescriptor_ = reinterpret_cast<::PeerDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:ClosestPeersRequest.peerDescriptor)
}

// string requestId = 2;
inline void ClosestPeersRequest::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& ClosestPeersRequest::requestid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClosestPeersRequest.requestId)
  return _internal_requestid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClosestPeersRequest::set_requestid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ClosestPeersRequest.requestId)
}
inline std::string* ClosestPeersRequest::mutable_requestid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:ClosestPeersRequest.requestId)
  return _s;
}
inline const std::string& ClosestPeersRequest::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_.Get();
}
inline void ClosestPeersRequest::_internal_set_requestid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(value, GetArena());
}
inline std::string* ClosestPeersRequest::_internal_mutable_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.requestid_.Mutable( GetArena());
}
inline std::string* ClosestPeersRequest::release_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ClosestPeersRequest.requestId)
  return _impl_.requestid_.Release();
}
inline void ClosestPeersRequest::set_allocated_requestid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.requestid_.IsDefault()) {
          _impl_.requestid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClosestPeersRequest.requestId)
}

// -------------------------------------------------------------------

// ClosestPeersResponse

// repeated .PeerDescriptor peers = 1;
inline int ClosestPeersResponse::_internal_peers_size() const {
  return _internal_peers().size();
}
inline int ClosestPeersResponse::peers_size() const {
  return _internal_peers_size();
}
inline void ClosestPeersResponse::clear_peers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.peers_.Clear();
}
inline ::PeerDescriptor* ClosestPeersResponse::mutable_peers(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ClosestPeersResponse.peers)
  return _internal_mutable_peers()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::PeerDescriptor>* ClosestPeersResponse::mutable_peers()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ClosestPeersResponse.peers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_peers();
}
inline const ::PeerDescriptor& ClosestPeersResponse::peers(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClosestPeersResponse.peers)
  return _internal_peers().Get(index);
}
inline ::PeerDescriptor* ClosestPeersResponse::add_peers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::PeerDescriptor* _add = _internal_mutable_peers()->Add();
  // @@protoc_insertion_point(field_add:ClosestPeersResponse.peers)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::PeerDescriptor>& ClosestPeersResponse::peers() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ClosestPeersResponse.peers)
  return _internal_peers();
}
inline const ::google::protobuf::RepeatedPtrField<::PeerDescriptor>&
ClosestPeersResponse::_internal_peers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.peers_;
}
inline ::google::protobuf::RepeatedPtrField<::PeerDescriptor>*
ClosestPeersResponse::_internal_mutable_peers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.peers_;
}

// string requestId = 2;
inline void ClosestPeersResponse::clear_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.ClearToEmpty();
}
inline const std::string& ClosestPeersResponse::requestid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClosestPeersResponse.requestId)
  return _internal_requestid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClosestPeersResponse::set_requestid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ClosestPeersResponse.requestId)
}
inline std::string* ClosestPeersResponse::mutable_requestid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_requestid();
  // @@protoc_insertion_point(field_mutable:ClosestPeersResponse.requestId)
  return _s;
}
inline const std::string& ClosestPeersResponse::_internal_requestid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.requestid_.Get();
}
inline void ClosestPeersResponse::_internal_set_requestid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.requestid_.Set(value, GetArena());
}
inline std::string* ClosestPeersResponse::_internal_mutable_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.requestid_.Mutable( GetArena());
}
inline std::string* ClosestPeersResponse::release_requestid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ClosestPeersResponse.requestId)
  return _impl_.requestid_.Release();
}
inline void ClosestPeersResponse::set_allocated_requestid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.requestid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.requestid_.IsDefault()) {
          _impl_.requestid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClosestPeersResponse.requestId)
}

// -------------------------------------------------------------------

// PeerDescriptor

// bytes nodeId = 1;
inline void PeerDescriptor::clear_nodeid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodeid_.ClearToEmpty();
}
inline const std::string& PeerDescriptor::nodeid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PeerDescriptor.nodeId)
  return _internal_nodeid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PeerDescriptor::set_nodeid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodeid_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PeerDescriptor.nodeId)
}
inline std::string* PeerDescriptor::mutable_nodeid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nodeid();
  // @@protoc_insertion_point(field_mutable:PeerDescriptor.nodeId)
  return _s;
}
inline const std::string& PeerDescriptor::_internal_nodeid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodeid_.Get();
}
inline void PeerDescriptor::_internal_set_nodeid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.nodeid_.Set(value, GetArena());
}
inline std::string* PeerDescriptor::_internal_mutable_nodeid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.nodeid_.Mutable( GetArena());
}
inline std::string* PeerDescriptor::release_nodeid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PeerDescriptor.nodeId)
  return _impl_.nodeid_.Release();
}
inline void PeerDescriptor::set_allocated_nodeid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodeid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.nodeid_.IsDefault()) {
          _impl_.nodeid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PeerDescriptor.nodeId)
}

// .NodeType type = 2;
inline void PeerDescriptor::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::NodeType PeerDescriptor::type() const {
  // @@protoc_insertion_point(field_get:PeerDescriptor.type)
  return _internal_type();
}
inline void PeerDescriptor::set_type(::NodeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PeerDescriptor.type)
}
inline ::NodeType PeerDescriptor::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::NodeType>(_impl_.type_);
}
inline void PeerDescriptor::_internal_set_type(::NodeType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .ConnectivityMethod udp = 3;
inline bool PeerDescriptor::has_udp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.udp_ != nullptr);
  return value;
}
inline void PeerDescriptor::clear_udp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.udp_ != nullptr) _impl_.udp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ConnectivityMethod& PeerDescriptor::_internal_udp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ConnectivityMethod* p = _impl_.udp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ConnectivityMethod&>(::_ConnectivityMethod_default_instance_);
}
inline const ::ConnectivityMethod& PeerDescriptor::udp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PeerDescriptor.udp)
  return _internal_udp();
}
inline void PeerDescriptor::unsafe_arena_set_allocated_udp(::ConnectivityMethod* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.udp_);
  }
  _impl_.udp_ = reinterpret_cast<::ConnectivityMethod*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PeerDescriptor.udp)
}
inline ::ConnectivityMethod* PeerDescriptor::release_udp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ConnectivityMethod* released = _impl_.udp_;
  _impl_.udp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ConnectivityMethod* PeerDescriptor::unsafe_arena_release_udp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PeerDescriptor.udp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ConnectivityMethod* temp = _impl_.udp_;
  _impl_.udp_ = nullptr;
  return temp;
}
inline ::ConnectivityMethod* PeerDescriptor::_internal_mutable_udp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.udp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConnectivityMethod>(GetArena());
    _impl_.udp_ = reinterpret_cast<::ConnectivityMethod*>(p);
  }
  return _impl_.udp_;
}
inline ::ConnectivityMethod* PeerDescriptor::mutable_udp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ConnectivityMethod* _msg = _internal_mutable_udp();
  // @@protoc_insertion_point(field_mutable:PeerDescriptor.udp)
  return _msg;
}
inline void PeerDescriptor::set_allocated_udp(::ConnectivityMethod* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ConnectivityMethod*>(_impl_.udp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ConnectivityMethod*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.udp_ = reinterpret_cast<::ConnectivityMethod*>(value);
  // @@protoc_insertion_point(field_set_allocated:PeerDescriptor.udp)
}

// .ConnectivityMethod tcp = 4;
inline bool PeerDescriptor::has_tcp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tcp_ != nullptr);
  return value;
}
inline void PeerDescriptor::clear_tcp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.tcp_ != nullptr) _impl_.tcp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ConnectivityMethod& PeerDescriptor::_internal_tcp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ConnectivityMethod* p = _impl_.tcp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ConnectivityMethod&>(::_ConnectivityMethod_default_instance_);
}
inline const ::ConnectivityMethod& PeerDescriptor::tcp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PeerDescriptor.tcp)
  return _internal_tcp();
}
inline void PeerDescriptor::unsafe_arena_set_allocated_tcp(::ConnectivityMethod* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.tcp_);
  }
  _impl_.tcp_ = reinterpret_cast<::ConnectivityMethod*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PeerDescriptor.tcp)
}
inline ::ConnectivityMethod* PeerDescriptor::release_tcp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ConnectivityMethod* released = _impl_.tcp_;
  _impl_.tcp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ConnectivityMethod* PeerDescriptor::unsafe_arena_release_tcp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PeerDescriptor.tcp)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ConnectivityMethod* temp = _impl_.tcp_;
  _impl_.tcp_ = nullptr;
  return temp;
}
inline ::ConnectivityMethod* PeerDescriptor::_internal_mutable_tcp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tcp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConnectivityMethod>(GetArena());
    _impl_.tcp_ = reinterpret_cast<::ConnectivityMethod*>(p);
  }
  return _impl_.tcp_;
}
inline ::ConnectivityMethod* PeerDescriptor::mutable_tcp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ConnectivityMethod* _msg = _internal_mutable_tcp();
  // @@protoc_insertion_point(field_mutable:PeerDescriptor.tcp)
  return _msg;
}
inline void PeerDescriptor::set_allocated_tcp(::ConnectivityMethod* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ConnectivityMethod*>(_impl_.tcp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ConnectivityMethod*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.tcp_ = reinterpret_cast<::ConnectivityMethod*>(value);
  // @@protoc_insertion_point(field_set_allocated:PeerDescriptor.tcp)
}

// .ConnectivityMethod websocket = 5;
inline bool PeerDescriptor::has_websocket() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.websocket_ != nullptr);
  return value;
}
inline void PeerDescriptor::clear_websocket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.websocket_ != nullptr) _impl_.websocket_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::ConnectivityMethod& PeerDescriptor::_internal_websocket() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::ConnectivityMethod* p = _impl_.websocket_;
  return p != nullptr ? *p : reinterpret_cast<const ::ConnectivityMethod&>(::_ConnectivityMethod_default_instance_);
}
inline const ::ConnectivityMethod& PeerDescriptor::websocket() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PeerDescriptor.websocket)
  return _internal_websocket();
}
inline void PeerDescriptor::unsafe_arena_set_allocated_websocket(::ConnectivityMethod* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.websocket_);
  }
  _impl_.websocket_ = reinterpret_cast<::ConnectivityMethod*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PeerDescriptor.websocket)
}
inline ::ConnectivityMethod* PeerDescriptor::release_websocket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ConnectivityMethod* released = _impl_.websocket_;
  _impl_.websocket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::ConnectivityMethod* PeerDescriptor::unsafe_arena_release_websocket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:PeerDescriptor.websocket)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ConnectivityMethod* temp = _impl_.websocket_;
  _impl_.websocket_ = nullptr;
  return temp;
}
inline ::ConnectivityMethod* PeerDescriptor::_internal_mutable_websocket() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.websocket_ == nullptr) {
    auto* p = CreateMaybeMessage<::ConnectivityMethod>(GetArena());
    _impl_.websocket_ = reinterpret_cast<::ConnectivityMethod*>(p);
  }
  return _impl_.websocket_;
}
inline ::ConnectivityMethod* PeerDescriptor::mutable_websocket() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ConnectivityMethod* _msg = _internal_mutable_websocket();
  // @@protoc_insertion_point(field_mutable:PeerDescriptor.websocket)
  return _msg;
}
inline void PeerDescriptor::set_allocated_websocket(::ConnectivityMethod* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::ConnectivityMethod*>(_impl_.websocket_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::ConnectivityMethod*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.websocket_ = reinterpret_cast<::ConnectivityMethod*>(value);
  // @@protoc_insertion_point(field_set_allocated:PeerDescriptor.websocket)
}

// optional bool openInternet = 6;
inline bool PeerDescriptor::has_openinternet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PeerDescriptor::clear_openinternet() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.openinternet_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool PeerDescriptor::openinternet() const {
  // @@protoc_insertion_point(field_get:PeerDescriptor.openInternet)
  return _internal_openinternet();
}
inline void PeerDescriptor::set_openinternet(bool value) {
  _internal_set_openinternet(value);
  // @@protoc_insertion_point(field_set:PeerDescriptor.openInternet)
}
inline bool PeerDescriptor::_internal_openinternet() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.openinternet_;
}
inline void PeerDescriptor::_internal_set_openinternet(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.openinternet_ = value;
}

// -------------------------------------------------------------------

// ConnectivityMethod

// uint32 port = 2;
inline void ConnectivityMethod::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t ConnectivityMethod::port() const {
  // @@protoc_insertion_point(field_get:ConnectivityMethod.port)
  return _internal_port();
}
inline void ConnectivityMethod::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ConnectivityMethod.port)
}
inline ::uint32_t ConnectivityMethod::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void ConnectivityMethod::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// string ip = 3;
inline void ConnectivityMethod::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& ConnectivityMethod::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ConnectivityMethod.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectivityMethod::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ConnectivityMethod.ip)
}
inline std::string* ConnectivityMethod::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:ConnectivityMethod.ip)
  return _s;
}
inline const std::string& ConnectivityMethod::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void ConnectivityMethod::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* ConnectivityMethod::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* ConnectivityMethod::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ConnectivityMethod.ip)
  return _impl_.ip_.Release();
}
inline void ConnectivityMethod::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ConnectivityMethod.ip)
}

// -------------------------------------------------------------------

// OptionalRequest

// optional string someOptionalField = 1;
inline bool OptionalRequest::has_someoptionalfield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OptionalRequest::clear_someoptionalfield() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.someoptionalfield_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OptionalRequest::someoptionalfield() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OptionalRequest.someOptionalField)
  return _internal_someoptionalfield();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionalRequest::set_someoptionalfield(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.someoptionalfield_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OptionalRequest.someOptionalField)
}
inline std::string* OptionalRequest::mutable_someoptionalfield() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_someoptionalfield();
  // @@protoc_insertion_point(field_mutable:OptionalRequest.someOptionalField)
  return _s;
}
inline const std::string& OptionalRequest::_internal_someoptionalfield() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.someoptionalfield_.Get();
}
inline void OptionalRequest::_internal_set_someoptionalfield(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.someoptionalfield_.Set(value, GetArena());
}
inline std::string* OptionalRequest::_internal_mutable_someoptionalfield() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.someoptionalfield_.Mutable( GetArena());
}
inline std::string* OptionalRequest::release_someoptionalfield() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:OptionalRequest.someOptionalField)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.someoptionalfield_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.someoptionalfield_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void OptionalRequest::set_allocated_someoptionalfield(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.someoptionalfield_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.someoptionalfield_.IsDefault()) {
          _impl_.someoptionalfield_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OptionalRequest.someOptionalField)
}

// -------------------------------------------------------------------

// OptionalResponse

// optional string someOptionalField = 1;
inline bool OptionalResponse::has_someoptionalfield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OptionalResponse::clear_someoptionalfield() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.someoptionalfield_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OptionalResponse::someoptionalfield() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OptionalResponse.someOptionalField)
  return _internal_someoptionalfield();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OptionalResponse::set_someoptionalfield(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.someoptionalfield_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OptionalResponse.someOptionalField)
}
inline std::string* OptionalResponse::mutable_someoptionalfield() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_someoptionalfield();
  // @@protoc_insertion_point(field_mutable:OptionalResponse.someOptionalField)
  return _s;
}
inline const std::string& OptionalResponse::_internal_someoptionalfield() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.someoptionalfield_.Get();
}
inline void OptionalResponse::_internal_set_someoptionalfield(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.someoptionalfield_.Set(value, GetArena());
}
inline std::string* OptionalResponse::_internal_mutable_someoptionalfield() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.someoptionalfield_.Mutable( GetArena());
}
inline std::string* OptionalResponse::release_someoptionalfield() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:OptionalResponse.someOptionalField)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.someoptionalfield_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.someoptionalfield_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void OptionalResponse::set_allocated_someoptionalfield(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.someoptionalfield_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.someoptionalfield_.IsDefault()) {
          _impl_.someoptionalfield_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OptionalResponse.someOptionalField)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::NodeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::NodeType>() {
  return ::NodeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_TestProtos_2eproto_2epb_2eh
